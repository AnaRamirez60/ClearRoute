
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Conductores
 * 
 */
export type Conductores = $Result.DefaultSelection<Prisma.$ConductoresPayload>
/**
 * Model Contenedores
 * 
 */
export type Contenedores = $Result.DefaultSelection<Prisma.$ContenedoresPayload>
/**
 * Model Rutas
 * 
 */
export type Rutas = $Result.DefaultSelection<Prisma.$RutasPayload>
/**
 * Model Formularios
 * 
 */
export type Formularios = $Result.DefaultSelection<Prisma.$FormulariosPayload>
/**
 * Model Sensores
 * 
 */
export type Sensores = $Result.DefaultSelection<Prisma.$SensoresPayload>
/**
 * Model Lecturas
 * 
 */
export type Lecturas = $Result.DefaultSelection<Prisma.$LecturasPayload>
/**
 * Model Tareas
 * 
 */
export type Tareas = $Result.DefaultSelection<Prisma.$TareasPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Conductores
 * const conductores = await prisma.conductores.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Conductores
   * const conductores = await prisma.conductores.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.conductores`: Exposes CRUD operations for the **Conductores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conductores
    * const conductores = await prisma.conductores.findMany()
    * ```
    */
  get conductores(): Prisma.ConductoresDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contenedores`: Exposes CRUD operations for the **Contenedores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contenedores
    * const contenedores = await prisma.contenedores.findMany()
    * ```
    */
  get contenedores(): Prisma.ContenedoresDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rutas`: Exposes CRUD operations for the **Rutas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rutas
    * const rutas = await prisma.rutas.findMany()
    * ```
    */
  get rutas(): Prisma.RutasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.formularios`: Exposes CRUD operations for the **Formularios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Formularios
    * const formularios = await prisma.formularios.findMany()
    * ```
    */
  get formularios(): Prisma.FormulariosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sensores`: Exposes CRUD operations for the **Sensores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sensores
    * const sensores = await prisma.sensores.findMany()
    * ```
    */
  get sensores(): Prisma.SensoresDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lecturas`: Exposes CRUD operations for the **Lecturas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lecturas
    * const lecturas = await prisma.lecturas.findMany()
    * ```
    */
  get lecturas(): Prisma.LecturasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tareas`: Exposes CRUD operations for the **Tareas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tareas
    * const tareas = await prisma.tareas.findMany()
    * ```
    */
  get tareas(): Prisma.TareasDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Conductores: 'Conductores',
    Contenedores: 'Contenedores',
    Rutas: 'Rutas',
    Formularios: 'Formularios',
    Sensores: 'Sensores',
    Lecturas: 'Lecturas',
    Tareas: 'Tareas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "conductores" | "contenedores" | "rutas" | "formularios" | "sensores" | "lecturas" | "tareas"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Conductores: {
        payload: Prisma.$ConductoresPayload<ExtArgs>
        fields: Prisma.ConductoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConductoresFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConductoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConductoresFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConductoresPayload>
          }
          findFirst: {
            args: Prisma.ConductoresFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConductoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConductoresFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConductoresPayload>
          }
          findMany: {
            args: Prisma.ConductoresFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConductoresPayload>[]
          }
          create: {
            args: Prisma.ConductoresCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConductoresPayload>
          }
          createMany: {
            args: Prisma.ConductoresCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConductoresCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConductoresPayload>[]
          }
          delete: {
            args: Prisma.ConductoresDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConductoresPayload>
          }
          update: {
            args: Prisma.ConductoresUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConductoresPayload>
          }
          deleteMany: {
            args: Prisma.ConductoresDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConductoresUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConductoresUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConductoresPayload>[]
          }
          upsert: {
            args: Prisma.ConductoresUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConductoresPayload>
          }
          aggregate: {
            args: Prisma.ConductoresAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConductores>
          }
          groupBy: {
            args: Prisma.ConductoresGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConductoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConductoresCountArgs<ExtArgs>
            result: $Utils.Optional<ConductoresCountAggregateOutputType> | number
          }
        }
      }
      Contenedores: {
        payload: Prisma.$ContenedoresPayload<ExtArgs>
        fields: Prisma.ContenedoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContenedoresFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenedoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContenedoresFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenedoresPayload>
          }
          findFirst: {
            args: Prisma.ContenedoresFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenedoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContenedoresFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenedoresPayload>
          }
          findMany: {
            args: Prisma.ContenedoresFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenedoresPayload>[]
          }
          create: {
            args: Prisma.ContenedoresCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenedoresPayload>
          }
          createMany: {
            args: Prisma.ContenedoresCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContenedoresCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenedoresPayload>[]
          }
          delete: {
            args: Prisma.ContenedoresDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenedoresPayload>
          }
          update: {
            args: Prisma.ContenedoresUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenedoresPayload>
          }
          deleteMany: {
            args: Prisma.ContenedoresDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContenedoresUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContenedoresUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenedoresPayload>[]
          }
          upsert: {
            args: Prisma.ContenedoresUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContenedoresPayload>
          }
          aggregate: {
            args: Prisma.ContenedoresAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContenedores>
          }
          groupBy: {
            args: Prisma.ContenedoresGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContenedoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContenedoresCountArgs<ExtArgs>
            result: $Utils.Optional<ContenedoresCountAggregateOutputType> | number
          }
        }
      }
      Rutas: {
        payload: Prisma.$RutasPayload<ExtArgs>
        fields: Prisma.RutasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RutasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RutasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutasPayload>
          }
          findFirst: {
            args: Prisma.RutasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RutasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutasPayload>
          }
          findMany: {
            args: Prisma.RutasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutasPayload>[]
          }
          create: {
            args: Prisma.RutasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutasPayload>
          }
          createMany: {
            args: Prisma.RutasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RutasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutasPayload>[]
          }
          delete: {
            args: Prisma.RutasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutasPayload>
          }
          update: {
            args: Prisma.RutasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutasPayload>
          }
          deleteMany: {
            args: Prisma.RutasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RutasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RutasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutasPayload>[]
          }
          upsert: {
            args: Prisma.RutasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RutasPayload>
          }
          aggregate: {
            args: Prisma.RutasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRutas>
          }
          groupBy: {
            args: Prisma.RutasGroupByArgs<ExtArgs>
            result: $Utils.Optional<RutasGroupByOutputType>[]
          }
          count: {
            args: Prisma.RutasCountArgs<ExtArgs>
            result: $Utils.Optional<RutasCountAggregateOutputType> | number
          }
        }
      }
      Formularios: {
        payload: Prisma.$FormulariosPayload<ExtArgs>
        fields: Prisma.FormulariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormulariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormulariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulariosPayload>
          }
          findFirst: {
            args: Prisma.FormulariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormulariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulariosPayload>
          }
          findMany: {
            args: Prisma.FormulariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulariosPayload>[]
          }
          create: {
            args: Prisma.FormulariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulariosPayload>
          }
          createMany: {
            args: Prisma.FormulariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormulariosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulariosPayload>[]
          }
          delete: {
            args: Prisma.FormulariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulariosPayload>
          }
          update: {
            args: Prisma.FormulariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulariosPayload>
          }
          deleteMany: {
            args: Prisma.FormulariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormulariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FormulariosUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulariosPayload>[]
          }
          upsert: {
            args: Prisma.FormulariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormulariosPayload>
          }
          aggregate: {
            args: Prisma.FormulariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFormularios>
          }
          groupBy: {
            args: Prisma.FormulariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormulariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormulariosCountArgs<ExtArgs>
            result: $Utils.Optional<FormulariosCountAggregateOutputType> | number
          }
        }
      }
      Sensores: {
        payload: Prisma.$SensoresPayload<ExtArgs>
        fields: Prisma.SensoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SensoresFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SensoresFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensoresPayload>
          }
          findFirst: {
            args: Prisma.SensoresFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SensoresFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensoresPayload>
          }
          findMany: {
            args: Prisma.SensoresFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensoresPayload>[]
          }
          create: {
            args: Prisma.SensoresCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensoresPayload>
          }
          createMany: {
            args: Prisma.SensoresCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SensoresCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensoresPayload>[]
          }
          delete: {
            args: Prisma.SensoresDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensoresPayload>
          }
          update: {
            args: Prisma.SensoresUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensoresPayload>
          }
          deleteMany: {
            args: Prisma.SensoresDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SensoresUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SensoresUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensoresPayload>[]
          }
          upsert: {
            args: Prisma.SensoresUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SensoresPayload>
          }
          aggregate: {
            args: Prisma.SensoresAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSensores>
          }
          groupBy: {
            args: Prisma.SensoresGroupByArgs<ExtArgs>
            result: $Utils.Optional<SensoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.SensoresCountArgs<ExtArgs>
            result: $Utils.Optional<SensoresCountAggregateOutputType> | number
          }
        }
      }
      Lecturas: {
        payload: Prisma.$LecturasPayload<ExtArgs>
        fields: Prisma.LecturasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LecturasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LecturasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LecturasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LecturasPayload>
          }
          findFirst: {
            args: Prisma.LecturasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LecturasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LecturasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LecturasPayload>
          }
          findMany: {
            args: Prisma.LecturasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LecturasPayload>[]
          }
          create: {
            args: Prisma.LecturasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LecturasPayload>
          }
          createMany: {
            args: Prisma.LecturasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LecturasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LecturasPayload>[]
          }
          delete: {
            args: Prisma.LecturasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LecturasPayload>
          }
          update: {
            args: Prisma.LecturasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LecturasPayload>
          }
          deleteMany: {
            args: Prisma.LecturasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LecturasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LecturasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LecturasPayload>[]
          }
          upsert: {
            args: Prisma.LecturasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LecturasPayload>
          }
          aggregate: {
            args: Prisma.LecturasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLecturas>
          }
          groupBy: {
            args: Prisma.LecturasGroupByArgs<ExtArgs>
            result: $Utils.Optional<LecturasGroupByOutputType>[]
          }
          count: {
            args: Prisma.LecturasCountArgs<ExtArgs>
            result: $Utils.Optional<LecturasCountAggregateOutputType> | number
          }
        }
      }
      Tareas: {
        payload: Prisma.$TareasPayload<ExtArgs>
        fields: Prisma.TareasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TareasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TareasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TareasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TareasPayload>
          }
          findFirst: {
            args: Prisma.TareasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TareasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TareasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TareasPayload>
          }
          findMany: {
            args: Prisma.TareasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TareasPayload>[]
          }
          create: {
            args: Prisma.TareasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TareasPayload>
          }
          createMany: {
            args: Prisma.TareasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TareasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TareasPayload>[]
          }
          delete: {
            args: Prisma.TareasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TareasPayload>
          }
          update: {
            args: Prisma.TareasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TareasPayload>
          }
          deleteMany: {
            args: Prisma.TareasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TareasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TareasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TareasPayload>[]
          }
          upsert: {
            args: Prisma.TareasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TareasPayload>
          }
          aggregate: {
            args: Prisma.TareasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTareas>
          }
          groupBy: {
            args: Prisma.TareasGroupByArgs<ExtArgs>
            result: $Utils.Optional<TareasGroupByOutputType>[]
          }
          count: {
            args: Prisma.TareasCountArgs<ExtArgs>
            result: $Utils.Optional<TareasCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    conductores?: ConductoresOmit
    contenedores?: ContenedoresOmit
    rutas?: RutasOmit
    formularios?: FormulariosOmit
    sensores?: SensoresOmit
    lecturas?: LecturasOmit
    tareas?: TareasOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ConductoresCountOutputType
   */

  export type ConductoresCountOutputType = {
    rutas: number
    tareas: number
  }

  export type ConductoresCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rutas?: boolean | ConductoresCountOutputTypeCountRutasArgs
    tareas?: boolean | ConductoresCountOutputTypeCountTareasArgs
  }

  // Custom InputTypes
  /**
   * ConductoresCountOutputType without action
   */
  export type ConductoresCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConductoresCountOutputType
     */
    select?: ConductoresCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConductoresCountOutputType without action
   */
  export type ConductoresCountOutputTypeCountRutasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RutasWhereInput
  }

  /**
   * ConductoresCountOutputType without action
   */
  export type ConductoresCountOutputTypeCountTareasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TareasWhereInput
  }


  /**
   * Count Type ContenedoresCountOutputType
   */

  export type ContenedoresCountOutputType = {
    sensores: number
    formularios: number
    tareas: number
  }

  export type ContenedoresCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sensores?: boolean | ContenedoresCountOutputTypeCountSensoresArgs
    formularios?: boolean | ContenedoresCountOutputTypeCountFormulariosArgs
    tareas?: boolean | ContenedoresCountOutputTypeCountTareasArgs
  }

  // Custom InputTypes
  /**
   * ContenedoresCountOutputType without action
   */
  export type ContenedoresCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContenedoresCountOutputType
     */
    select?: ContenedoresCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContenedoresCountOutputType without action
   */
  export type ContenedoresCountOutputTypeCountSensoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SensoresWhereInput
  }

  /**
   * ContenedoresCountOutputType without action
   */
  export type ContenedoresCountOutputTypeCountFormulariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormulariosWhereInput
  }

  /**
   * ContenedoresCountOutputType without action
   */
  export type ContenedoresCountOutputTypeCountTareasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TareasWhereInput
  }


  /**
   * Count Type RutasCountOutputType
   */

  export type RutasCountOutputType = {
    tareas: number
  }

  export type RutasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tareas?: boolean | RutasCountOutputTypeCountTareasArgs
  }

  // Custom InputTypes
  /**
   * RutasCountOutputType without action
   */
  export type RutasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RutasCountOutputType
     */
    select?: RutasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RutasCountOutputType without action
   */
  export type RutasCountOutputTypeCountTareasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TareasWhereInput
  }


  /**
   * Count Type SensoresCountOutputType
   */

  export type SensoresCountOutputType = {
    lecturas: number
  }

  export type SensoresCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lecturas?: boolean | SensoresCountOutputTypeCountLecturasArgs
  }

  // Custom InputTypes
  /**
   * SensoresCountOutputType without action
   */
  export type SensoresCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SensoresCountOutputType
     */
    select?: SensoresCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SensoresCountOutputType without action
   */
  export type SensoresCountOutputTypeCountLecturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LecturasWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Conductores
   */

  export type AggregateConductores = {
    _count: ConductoresCountAggregateOutputType | null
    _avg: ConductoresAvgAggregateOutputType | null
    _sum: ConductoresSumAggregateOutputType | null
    _min: ConductoresMinAggregateOutputType | null
    _max: ConductoresMaxAggregateOutputType | null
  }

  export type ConductoresAvgAggregateOutputType = {
    id: number | null
  }

  export type ConductoresSumAggregateOutputType = {
    id: bigint | null
  }

  export type ConductoresMinAggregateOutputType = {
    id: bigint | null
    cr_nombre: string | null
    cr_correo: string | null
    cr_contrasenia: string | null
  }

  export type ConductoresMaxAggregateOutputType = {
    id: bigint | null
    cr_nombre: string | null
    cr_correo: string | null
    cr_contrasenia: string | null
  }

  export type ConductoresCountAggregateOutputType = {
    id: number
    cr_nombre: number
    cr_correo: number
    cr_contrasenia: number
    _all: number
  }


  export type ConductoresAvgAggregateInputType = {
    id?: true
  }

  export type ConductoresSumAggregateInputType = {
    id?: true
  }

  export type ConductoresMinAggregateInputType = {
    id?: true
    cr_nombre?: true
    cr_correo?: true
    cr_contrasenia?: true
  }

  export type ConductoresMaxAggregateInputType = {
    id?: true
    cr_nombre?: true
    cr_correo?: true
    cr_contrasenia?: true
  }

  export type ConductoresCountAggregateInputType = {
    id?: true
    cr_nombre?: true
    cr_correo?: true
    cr_contrasenia?: true
    _all?: true
  }

  export type ConductoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conductores to aggregate.
     */
    where?: ConductoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conductores to fetch.
     */
    orderBy?: ConductoresOrderByWithRelationInput | ConductoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConductoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conductores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conductores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conductores
    **/
    _count?: true | ConductoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConductoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConductoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConductoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConductoresMaxAggregateInputType
  }

  export type GetConductoresAggregateType<T extends ConductoresAggregateArgs> = {
        [P in keyof T & keyof AggregateConductores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConductores[P]>
      : GetScalarType<T[P], AggregateConductores[P]>
  }




  export type ConductoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConductoresWhereInput
    orderBy?: ConductoresOrderByWithAggregationInput | ConductoresOrderByWithAggregationInput[]
    by: ConductoresScalarFieldEnum[] | ConductoresScalarFieldEnum
    having?: ConductoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConductoresCountAggregateInputType | true
    _avg?: ConductoresAvgAggregateInputType
    _sum?: ConductoresSumAggregateInputType
    _min?: ConductoresMinAggregateInputType
    _max?: ConductoresMaxAggregateInputType
  }

  export type ConductoresGroupByOutputType = {
    id: bigint
    cr_nombre: string
    cr_correo: string
    cr_contrasenia: string
    _count: ConductoresCountAggregateOutputType | null
    _avg: ConductoresAvgAggregateOutputType | null
    _sum: ConductoresSumAggregateOutputType | null
    _min: ConductoresMinAggregateOutputType | null
    _max: ConductoresMaxAggregateOutputType | null
  }

  type GetConductoresGroupByPayload<T extends ConductoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConductoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConductoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConductoresGroupByOutputType[P]>
            : GetScalarType<T[P], ConductoresGroupByOutputType[P]>
        }
      >
    >


  export type ConductoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_nombre?: boolean
    cr_correo?: boolean
    cr_contrasenia?: boolean
    rutas?: boolean | Conductores$rutasArgs<ExtArgs>
    tareas?: boolean | Conductores$tareasArgs<ExtArgs>
    _count?: boolean | ConductoresCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conductores"]>

  export type ConductoresSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_nombre?: boolean
    cr_correo?: boolean
    cr_contrasenia?: boolean
  }, ExtArgs["result"]["conductores"]>

  export type ConductoresSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_nombre?: boolean
    cr_correo?: boolean
    cr_contrasenia?: boolean
  }, ExtArgs["result"]["conductores"]>

  export type ConductoresSelectScalar = {
    id?: boolean
    cr_nombre?: boolean
    cr_correo?: boolean
    cr_contrasenia?: boolean
  }

  export type ConductoresOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cr_nombre" | "cr_correo" | "cr_contrasenia", ExtArgs["result"]["conductores"]>
  export type ConductoresInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rutas?: boolean | Conductores$rutasArgs<ExtArgs>
    tareas?: boolean | Conductores$tareasArgs<ExtArgs>
    _count?: boolean | ConductoresCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConductoresIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ConductoresIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ConductoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Conductores"
    objects: {
      rutas: Prisma.$RutasPayload<ExtArgs>[]
      tareas: Prisma.$TareasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      cr_nombre: string
      cr_correo: string
      cr_contrasenia: string
    }, ExtArgs["result"]["conductores"]>
    composites: {}
  }

  type ConductoresGetPayload<S extends boolean | null | undefined | ConductoresDefaultArgs> = $Result.GetResult<Prisma.$ConductoresPayload, S>

  type ConductoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConductoresFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConductoresCountAggregateInputType | true
    }

  export interface ConductoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conductores'], meta: { name: 'Conductores' } }
    /**
     * Find zero or one Conductores that matches the filter.
     * @param {ConductoresFindUniqueArgs} args - Arguments to find a Conductores
     * @example
     * // Get one Conductores
     * const conductores = await prisma.conductores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConductoresFindUniqueArgs>(args: SelectSubset<T, ConductoresFindUniqueArgs<ExtArgs>>): Prisma__ConductoresClient<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Conductores that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConductoresFindUniqueOrThrowArgs} args - Arguments to find a Conductores
     * @example
     * // Get one Conductores
     * const conductores = await prisma.conductores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConductoresFindUniqueOrThrowArgs>(args: SelectSubset<T, ConductoresFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConductoresClient<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Conductores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConductoresFindFirstArgs} args - Arguments to find a Conductores
     * @example
     * // Get one Conductores
     * const conductores = await prisma.conductores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConductoresFindFirstArgs>(args?: SelectSubset<T, ConductoresFindFirstArgs<ExtArgs>>): Prisma__ConductoresClient<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Conductores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConductoresFindFirstOrThrowArgs} args - Arguments to find a Conductores
     * @example
     * // Get one Conductores
     * const conductores = await prisma.conductores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConductoresFindFirstOrThrowArgs>(args?: SelectSubset<T, ConductoresFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConductoresClient<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Conductores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConductoresFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conductores
     * const conductores = await prisma.conductores.findMany()
     * 
     * // Get first 10 Conductores
     * const conductores = await prisma.conductores.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conductoresWithIdOnly = await prisma.conductores.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConductoresFindManyArgs>(args?: SelectSubset<T, ConductoresFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Conductores.
     * @param {ConductoresCreateArgs} args - Arguments to create a Conductores.
     * @example
     * // Create one Conductores
     * const Conductores = await prisma.conductores.create({
     *   data: {
     *     // ... data to create a Conductores
     *   }
     * })
     * 
     */
    create<T extends ConductoresCreateArgs>(args: SelectSubset<T, ConductoresCreateArgs<ExtArgs>>): Prisma__ConductoresClient<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Conductores.
     * @param {ConductoresCreateManyArgs} args - Arguments to create many Conductores.
     * @example
     * // Create many Conductores
     * const conductores = await prisma.conductores.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConductoresCreateManyArgs>(args?: SelectSubset<T, ConductoresCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Conductores and returns the data saved in the database.
     * @param {ConductoresCreateManyAndReturnArgs} args - Arguments to create many Conductores.
     * @example
     * // Create many Conductores
     * const conductores = await prisma.conductores.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Conductores and only return the `id`
     * const conductoresWithIdOnly = await prisma.conductores.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConductoresCreateManyAndReturnArgs>(args?: SelectSubset<T, ConductoresCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Conductores.
     * @param {ConductoresDeleteArgs} args - Arguments to delete one Conductores.
     * @example
     * // Delete one Conductores
     * const Conductores = await prisma.conductores.delete({
     *   where: {
     *     // ... filter to delete one Conductores
     *   }
     * })
     * 
     */
    delete<T extends ConductoresDeleteArgs>(args: SelectSubset<T, ConductoresDeleteArgs<ExtArgs>>): Prisma__ConductoresClient<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Conductores.
     * @param {ConductoresUpdateArgs} args - Arguments to update one Conductores.
     * @example
     * // Update one Conductores
     * const conductores = await prisma.conductores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConductoresUpdateArgs>(args: SelectSubset<T, ConductoresUpdateArgs<ExtArgs>>): Prisma__ConductoresClient<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Conductores.
     * @param {ConductoresDeleteManyArgs} args - Arguments to filter Conductores to delete.
     * @example
     * // Delete a few Conductores
     * const { count } = await prisma.conductores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConductoresDeleteManyArgs>(args?: SelectSubset<T, ConductoresDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conductores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConductoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conductores
     * const conductores = await prisma.conductores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConductoresUpdateManyArgs>(args: SelectSubset<T, ConductoresUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conductores and returns the data updated in the database.
     * @param {ConductoresUpdateManyAndReturnArgs} args - Arguments to update many Conductores.
     * @example
     * // Update many Conductores
     * const conductores = await prisma.conductores.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Conductores and only return the `id`
     * const conductoresWithIdOnly = await prisma.conductores.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConductoresUpdateManyAndReturnArgs>(args: SelectSubset<T, ConductoresUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Conductores.
     * @param {ConductoresUpsertArgs} args - Arguments to update or create a Conductores.
     * @example
     * // Update or create a Conductores
     * const conductores = await prisma.conductores.upsert({
     *   create: {
     *     // ... data to create a Conductores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conductores we want to update
     *   }
     * })
     */
    upsert<T extends ConductoresUpsertArgs>(args: SelectSubset<T, ConductoresUpsertArgs<ExtArgs>>): Prisma__ConductoresClient<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Conductores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConductoresCountArgs} args - Arguments to filter Conductores to count.
     * @example
     * // Count the number of Conductores
     * const count = await prisma.conductores.count({
     *   where: {
     *     // ... the filter for the Conductores we want to count
     *   }
     * })
    **/
    count<T extends ConductoresCountArgs>(
      args?: Subset<T, ConductoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConductoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conductores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConductoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConductoresAggregateArgs>(args: Subset<T, ConductoresAggregateArgs>): Prisma.PrismaPromise<GetConductoresAggregateType<T>>

    /**
     * Group by Conductores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConductoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConductoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConductoresGroupByArgs['orderBy'] }
        : { orderBy?: ConductoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConductoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConductoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conductores model
   */
  readonly fields: ConductoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conductores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConductoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rutas<T extends Conductores$rutasArgs<ExtArgs> = {}>(args?: Subset<T, Conductores$rutasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tareas<T extends Conductores$tareasArgs<ExtArgs> = {}>(args?: Subset<T, Conductores$tareasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Conductores model
   */ 
  interface ConductoresFieldRefs {
    readonly id: FieldRef<"Conductores", 'BigInt'>
    readonly cr_nombre: FieldRef<"Conductores", 'String'>
    readonly cr_correo: FieldRef<"Conductores", 'String'>
    readonly cr_contrasenia: FieldRef<"Conductores", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Conductores findUnique
   */
  export type ConductoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConductoresInclude<ExtArgs> | null
    /**
     * Filter, which Conductores to fetch.
     */
    where: ConductoresWhereUniqueInput
  }

  /**
   * Conductores findUniqueOrThrow
   */
  export type ConductoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConductoresInclude<ExtArgs> | null
    /**
     * Filter, which Conductores to fetch.
     */
    where: ConductoresWhereUniqueInput
  }

  /**
   * Conductores findFirst
   */
  export type ConductoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConductoresInclude<ExtArgs> | null
    /**
     * Filter, which Conductores to fetch.
     */
    where?: ConductoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conductores to fetch.
     */
    orderBy?: ConductoresOrderByWithRelationInput | ConductoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conductores.
     */
    cursor?: ConductoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conductores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conductores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conductores.
     */
    distinct?: ConductoresScalarFieldEnum | ConductoresScalarFieldEnum[]
  }

  /**
   * Conductores findFirstOrThrow
   */
  export type ConductoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConductoresInclude<ExtArgs> | null
    /**
     * Filter, which Conductores to fetch.
     */
    where?: ConductoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conductores to fetch.
     */
    orderBy?: ConductoresOrderByWithRelationInput | ConductoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conductores.
     */
    cursor?: ConductoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conductores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conductores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conductores.
     */
    distinct?: ConductoresScalarFieldEnum | ConductoresScalarFieldEnum[]
  }

  /**
   * Conductores findMany
   */
  export type ConductoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConductoresInclude<ExtArgs> | null
    /**
     * Filter, which Conductores to fetch.
     */
    where?: ConductoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conductores to fetch.
     */
    orderBy?: ConductoresOrderByWithRelationInput | ConductoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conductores.
     */
    cursor?: ConductoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conductores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conductores.
     */
    skip?: number
    distinct?: ConductoresScalarFieldEnum | ConductoresScalarFieldEnum[]
  }

  /**
   * Conductores create
   */
  export type ConductoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConductoresInclude<ExtArgs> | null
    /**
     * The data needed to create a Conductores.
     */
    data: XOR<ConductoresCreateInput, ConductoresUncheckedCreateInput>
  }

  /**
   * Conductores createMany
   */
  export type ConductoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conductores.
     */
    data: ConductoresCreateManyInput | ConductoresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Conductores createManyAndReturn
   */
  export type ConductoresCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * The data used to create many Conductores.
     */
    data: ConductoresCreateManyInput | ConductoresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Conductores update
   */
  export type ConductoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConductoresInclude<ExtArgs> | null
    /**
     * The data needed to update a Conductores.
     */
    data: XOR<ConductoresUpdateInput, ConductoresUncheckedUpdateInput>
    /**
     * Choose, which Conductores to update.
     */
    where: ConductoresWhereUniqueInput
  }

  /**
   * Conductores updateMany
   */
  export type ConductoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conductores.
     */
    data: XOR<ConductoresUpdateManyMutationInput, ConductoresUncheckedUpdateManyInput>
    /**
     * Filter which Conductores to update
     */
    where?: ConductoresWhereInput
    /**
     * Limit how many Conductores to update.
     */
    limit?: number
  }

  /**
   * Conductores updateManyAndReturn
   */
  export type ConductoresUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * The data used to update Conductores.
     */
    data: XOR<ConductoresUpdateManyMutationInput, ConductoresUncheckedUpdateManyInput>
    /**
     * Filter which Conductores to update
     */
    where?: ConductoresWhereInput
    /**
     * Limit how many Conductores to update.
     */
    limit?: number
  }

  /**
   * Conductores upsert
   */
  export type ConductoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConductoresInclude<ExtArgs> | null
    /**
     * The filter to search for the Conductores to update in case it exists.
     */
    where: ConductoresWhereUniqueInput
    /**
     * In case the Conductores found by the `where` argument doesn't exist, create a new Conductores with this data.
     */
    create: XOR<ConductoresCreateInput, ConductoresUncheckedCreateInput>
    /**
     * In case the Conductores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConductoresUpdateInput, ConductoresUncheckedUpdateInput>
  }

  /**
   * Conductores delete
   */
  export type ConductoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConductoresInclude<ExtArgs> | null
    /**
     * Filter which Conductores to delete.
     */
    where: ConductoresWhereUniqueInput
  }

  /**
   * Conductores deleteMany
   */
  export type ConductoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conductores to delete
     */
    where?: ConductoresWhereInput
    /**
     * Limit how many Conductores to delete.
     */
    limit?: number
  }

  /**
   * Conductores.rutas
   */
  export type Conductores$rutasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasInclude<ExtArgs> | null
    where?: RutasWhereInput
    orderBy?: RutasOrderByWithRelationInput | RutasOrderByWithRelationInput[]
    cursor?: RutasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RutasScalarFieldEnum | RutasScalarFieldEnum[]
  }

  /**
   * Conductores.tareas
   */
  export type Conductores$tareasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    where?: TareasWhereInput
    orderBy?: TareasOrderByWithRelationInput | TareasOrderByWithRelationInput[]
    cursor?: TareasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TareasScalarFieldEnum | TareasScalarFieldEnum[]
  }

  /**
   * Conductores without action
   */
  export type ConductoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConductoresInclude<ExtArgs> | null
  }


  /**
   * Model Contenedores
   */

  export type AggregateContenedores = {
    _count: ContenedoresCountAggregateOutputType | null
    _avg: ContenedoresAvgAggregateOutputType | null
    _sum: ContenedoresSumAggregateOutputType | null
    _min: ContenedoresMinAggregateOutputType | null
    _max: ContenedoresMaxAggregateOutputType | null
  }

  export type ContenedoresAvgAggregateOutputType = {
    id: number | null
    cr_nivel_llenado: number | null
  }

  export type ContenedoresSumAggregateOutputType = {
    id: bigint | null
    cr_nivel_llenado: number | null
  }

  export type ContenedoresMinAggregateOutputType = {
    id: bigint | null
    cr_ubicacion: string | null
    cr_codigo_qr: string | null
    cr_nivel_llenado: number | null
  }

  export type ContenedoresMaxAggregateOutputType = {
    id: bigint | null
    cr_ubicacion: string | null
    cr_codigo_qr: string | null
    cr_nivel_llenado: number | null
  }

  export type ContenedoresCountAggregateOutputType = {
    id: number
    cr_ubicacion: number
    cr_codigo_qr: number
    cr_nivel_llenado: number
    _all: number
  }


  export type ContenedoresAvgAggregateInputType = {
    id?: true
    cr_nivel_llenado?: true
  }

  export type ContenedoresSumAggregateInputType = {
    id?: true
    cr_nivel_llenado?: true
  }

  export type ContenedoresMinAggregateInputType = {
    id?: true
    cr_ubicacion?: true
    cr_codigo_qr?: true
    cr_nivel_llenado?: true
  }

  export type ContenedoresMaxAggregateInputType = {
    id?: true
    cr_ubicacion?: true
    cr_codigo_qr?: true
    cr_nivel_llenado?: true
  }

  export type ContenedoresCountAggregateInputType = {
    id?: true
    cr_ubicacion?: true
    cr_codigo_qr?: true
    cr_nivel_llenado?: true
    _all?: true
  }

  export type ContenedoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contenedores to aggregate.
     */
    where?: ContenedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contenedores to fetch.
     */
    orderBy?: ContenedoresOrderByWithRelationInput | ContenedoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContenedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contenedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contenedores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contenedores
    **/
    _count?: true | ContenedoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContenedoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContenedoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContenedoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContenedoresMaxAggregateInputType
  }

  export type GetContenedoresAggregateType<T extends ContenedoresAggregateArgs> = {
        [P in keyof T & keyof AggregateContenedores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContenedores[P]>
      : GetScalarType<T[P], AggregateContenedores[P]>
  }




  export type ContenedoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContenedoresWhereInput
    orderBy?: ContenedoresOrderByWithAggregationInput | ContenedoresOrderByWithAggregationInput[]
    by: ContenedoresScalarFieldEnum[] | ContenedoresScalarFieldEnum
    having?: ContenedoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContenedoresCountAggregateInputType | true
    _avg?: ContenedoresAvgAggregateInputType
    _sum?: ContenedoresSumAggregateInputType
    _min?: ContenedoresMinAggregateInputType
    _max?: ContenedoresMaxAggregateInputType
  }

  export type ContenedoresGroupByOutputType = {
    id: bigint
    cr_ubicacion: string
    cr_codigo_qr: string
    cr_nivel_llenado: number
    _count: ContenedoresCountAggregateOutputType | null
    _avg: ContenedoresAvgAggregateOutputType | null
    _sum: ContenedoresSumAggregateOutputType | null
    _min: ContenedoresMinAggregateOutputType | null
    _max: ContenedoresMaxAggregateOutputType | null
  }

  type GetContenedoresGroupByPayload<T extends ContenedoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContenedoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContenedoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContenedoresGroupByOutputType[P]>
            : GetScalarType<T[P], ContenedoresGroupByOutputType[P]>
        }
      >
    >


  export type ContenedoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_ubicacion?: boolean
    cr_codigo_qr?: boolean
    cr_nivel_llenado?: boolean
    sensores?: boolean | Contenedores$sensoresArgs<ExtArgs>
    formularios?: boolean | Contenedores$formulariosArgs<ExtArgs>
    tareas?: boolean | Contenedores$tareasArgs<ExtArgs>
    _count?: boolean | ContenedoresCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contenedores"]>

  export type ContenedoresSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_ubicacion?: boolean
    cr_codigo_qr?: boolean
    cr_nivel_llenado?: boolean
  }, ExtArgs["result"]["contenedores"]>

  export type ContenedoresSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_ubicacion?: boolean
    cr_codigo_qr?: boolean
    cr_nivel_llenado?: boolean
  }, ExtArgs["result"]["contenedores"]>

  export type ContenedoresSelectScalar = {
    id?: boolean
    cr_ubicacion?: boolean
    cr_codigo_qr?: boolean
    cr_nivel_llenado?: boolean
  }

  export type ContenedoresOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cr_ubicacion" | "cr_codigo_qr" | "cr_nivel_llenado", ExtArgs["result"]["contenedores"]>
  export type ContenedoresInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sensores?: boolean | Contenedores$sensoresArgs<ExtArgs>
    formularios?: boolean | Contenedores$formulariosArgs<ExtArgs>
    tareas?: boolean | Contenedores$tareasArgs<ExtArgs>
    _count?: boolean | ContenedoresCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContenedoresIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ContenedoresIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ContenedoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contenedores"
    objects: {
      sensores: Prisma.$SensoresPayload<ExtArgs>[]
      formularios: Prisma.$FormulariosPayload<ExtArgs>[]
      tareas: Prisma.$TareasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      cr_ubicacion: string
      cr_codigo_qr: string
      cr_nivel_llenado: number
    }, ExtArgs["result"]["contenedores"]>
    composites: {}
  }

  type ContenedoresGetPayload<S extends boolean | null | undefined | ContenedoresDefaultArgs> = $Result.GetResult<Prisma.$ContenedoresPayload, S>

  type ContenedoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContenedoresFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContenedoresCountAggregateInputType | true
    }

  export interface ContenedoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contenedores'], meta: { name: 'Contenedores' } }
    /**
     * Find zero or one Contenedores that matches the filter.
     * @param {ContenedoresFindUniqueArgs} args - Arguments to find a Contenedores
     * @example
     * // Get one Contenedores
     * const contenedores = await prisma.contenedores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContenedoresFindUniqueArgs>(args: SelectSubset<T, ContenedoresFindUniqueArgs<ExtArgs>>): Prisma__ContenedoresClient<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contenedores that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContenedoresFindUniqueOrThrowArgs} args - Arguments to find a Contenedores
     * @example
     * // Get one Contenedores
     * const contenedores = await prisma.contenedores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContenedoresFindUniqueOrThrowArgs>(args: SelectSubset<T, ContenedoresFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContenedoresClient<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contenedores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenedoresFindFirstArgs} args - Arguments to find a Contenedores
     * @example
     * // Get one Contenedores
     * const contenedores = await prisma.contenedores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContenedoresFindFirstArgs>(args?: SelectSubset<T, ContenedoresFindFirstArgs<ExtArgs>>): Prisma__ContenedoresClient<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contenedores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenedoresFindFirstOrThrowArgs} args - Arguments to find a Contenedores
     * @example
     * // Get one Contenedores
     * const contenedores = await prisma.contenedores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContenedoresFindFirstOrThrowArgs>(args?: SelectSubset<T, ContenedoresFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContenedoresClient<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contenedores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenedoresFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contenedores
     * const contenedores = await prisma.contenedores.findMany()
     * 
     * // Get first 10 Contenedores
     * const contenedores = await prisma.contenedores.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contenedoresWithIdOnly = await prisma.contenedores.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContenedoresFindManyArgs>(args?: SelectSubset<T, ContenedoresFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contenedores.
     * @param {ContenedoresCreateArgs} args - Arguments to create a Contenedores.
     * @example
     * // Create one Contenedores
     * const Contenedores = await prisma.contenedores.create({
     *   data: {
     *     // ... data to create a Contenedores
     *   }
     * })
     * 
     */
    create<T extends ContenedoresCreateArgs>(args: SelectSubset<T, ContenedoresCreateArgs<ExtArgs>>): Prisma__ContenedoresClient<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contenedores.
     * @param {ContenedoresCreateManyArgs} args - Arguments to create many Contenedores.
     * @example
     * // Create many Contenedores
     * const contenedores = await prisma.contenedores.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContenedoresCreateManyArgs>(args?: SelectSubset<T, ContenedoresCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contenedores and returns the data saved in the database.
     * @param {ContenedoresCreateManyAndReturnArgs} args - Arguments to create many Contenedores.
     * @example
     * // Create many Contenedores
     * const contenedores = await prisma.contenedores.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contenedores and only return the `id`
     * const contenedoresWithIdOnly = await prisma.contenedores.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContenedoresCreateManyAndReturnArgs>(args?: SelectSubset<T, ContenedoresCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contenedores.
     * @param {ContenedoresDeleteArgs} args - Arguments to delete one Contenedores.
     * @example
     * // Delete one Contenedores
     * const Contenedores = await prisma.contenedores.delete({
     *   where: {
     *     // ... filter to delete one Contenedores
     *   }
     * })
     * 
     */
    delete<T extends ContenedoresDeleteArgs>(args: SelectSubset<T, ContenedoresDeleteArgs<ExtArgs>>): Prisma__ContenedoresClient<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contenedores.
     * @param {ContenedoresUpdateArgs} args - Arguments to update one Contenedores.
     * @example
     * // Update one Contenedores
     * const contenedores = await prisma.contenedores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContenedoresUpdateArgs>(args: SelectSubset<T, ContenedoresUpdateArgs<ExtArgs>>): Prisma__ContenedoresClient<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contenedores.
     * @param {ContenedoresDeleteManyArgs} args - Arguments to filter Contenedores to delete.
     * @example
     * // Delete a few Contenedores
     * const { count } = await prisma.contenedores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContenedoresDeleteManyArgs>(args?: SelectSubset<T, ContenedoresDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contenedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenedoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contenedores
     * const contenedores = await prisma.contenedores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContenedoresUpdateManyArgs>(args: SelectSubset<T, ContenedoresUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contenedores and returns the data updated in the database.
     * @param {ContenedoresUpdateManyAndReturnArgs} args - Arguments to update many Contenedores.
     * @example
     * // Update many Contenedores
     * const contenedores = await prisma.contenedores.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contenedores and only return the `id`
     * const contenedoresWithIdOnly = await prisma.contenedores.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContenedoresUpdateManyAndReturnArgs>(args: SelectSubset<T, ContenedoresUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contenedores.
     * @param {ContenedoresUpsertArgs} args - Arguments to update or create a Contenedores.
     * @example
     * // Update or create a Contenedores
     * const contenedores = await prisma.contenedores.upsert({
     *   create: {
     *     // ... data to create a Contenedores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contenedores we want to update
     *   }
     * })
     */
    upsert<T extends ContenedoresUpsertArgs>(args: SelectSubset<T, ContenedoresUpsertArgs<ExtArgs>>): Prisma__ContenedoresClient<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contenedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenedoresCountArgs} args - Arguments to filter Contenedores to count.
     * @example
     * // Count the number of Contenedores
     * const count = await prisma.contenedores.count({
     *   where: {
     *     // ... the filter for the Contenedores we want to count
     *   }
     * })
    **/
    count<T extends ContenedoresCountArgs>(
      args?: Subset<T, ContenedoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContenedoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contenedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenedoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContenedoresAggregateArgs>(args: Subset<T, ContenedoresAggregateArgs>): Prisma.PrismaPromise<GetContenedoresAggregateType<T>>

    /**
     * Group by Contenedores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContenedoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContenedoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContenedoresGroupByArgs['orderBy'] }
        : { orderBy?: ContenedoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContenedoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContenedoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contenedores model
   */
  readonly fields: ContenedoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contenedores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContenedoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sensores<T extends Contenedores$sensoresArgs<ExtArgs> = {}>(args?: Subset<T, Contenedores$sensoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    formularios<T extends Contenedores$formulariosArgs<ExtArgs> = {}>(args?: Subset<T, Contenedores$formulariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tareas<T extends Contenedores$tareasArgs<ExtArgs> = {}>(args?: Subset<T, Contenedores$tareasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contenedores model
   */ 
  interface ContenedoresFieldRefs {
    readonly id: FieldRef<"Contenedores", 'BigInt'>
    readonly cr_ubicacion: FieldRef<"Contenedores", 'String'>
    readonly cr_codigo_qr: FieldRef<"Contenedores", 'String'>
    readonly cr_nivel_llenado: FieldRef<"Contenedores", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Contenedores findUnique
   */
  export type ContenedoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContenedoresInclude<ExtArgs> | null
    /**
     * Filter, which Contenedores to fetch.
     */
    where: ContenedoresWhereUniqueInput
  }

  /**
   * Contenedores findUniqueOrThrow
   */
  export type ContenedoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContenedoresInclude<ExtArgs> | null
    /**
     * Filter, which Contenedores to fetch.
     */
    where: ContenedoresWhereUniqueInput
  }

  /**
   * Contenedores findFirst
   */
  export type ContenedoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContenedoresInclude<ExtArgs> | null
    /**
     * Filter, which Contenedores to fetch.
     */
    where?: ContenedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contenedores to fetch.
     */
    orderBy?: ContenedoresOrderByWithRelationInput | ContenedoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contenedores.
     */
    cursor?: ContenedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contenedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contenedores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contenedores.
     */
    distinct?: ContenedoresScalarFieldEnum | ContenedoresScalarFieldEnum[]
  }

  /**
   * Contenedores findFirstOrThrow
   */
  export type ContenedoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContenedoresInclude<ExtArgs> | null
    /**
     * Filter, which Contenedores to fetch.
     */
    where?: ContenedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contenedores to fetch.
     */
    orderBy?: ContenedoresOrderByWithRelationInput | ContenedoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contenedores.
     */
    cursor?: ContenedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contenedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contenedores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contenedores.
     */
    distinct?: ContenedoresScalarFieldEnum | ContenedoresScalarFieldEnum[]
  }

  /**
   * Contenedores findMany
   */
  export type ContenedoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContenedoresInclude<ExtArgs> | null
    /**
     * Filter, which Contenedores to fetch.
     */
    where?: ContenedoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contenedores to fetch.
     */
    orderBy?: ContenedoresOrderByWithRelationInput | ContenedoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contenedores.
     */
    cursor?: ContenedoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contenedores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contenedores.
     */
    skip?: number
    distinct?: ContenedoresScalarFieldEnum | ContenedoresScalarFieldEnum[]
  }

  /**
   * Contenedores create
   */
  export type ContenedoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContenedoresInclude<ExtArgs> | null
    /**
     * The data needed to create a Contenedores.
     */
    data: XOR<ContenedoresCreateInput, ContenedoresUncheckedCreateInput>
  }

  /**
   * Contenedores createMany
   */
  export type ContenedoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contenedores.
     */
    data: ContenedoresCreateManyInput | ContenedoresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contenedores createManyAndReturn
   */
  export type ContenedoresCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * The data used to create many Contenedores.
     */
    data: ContenedoresCreateManyInput | ContenedoresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contenedores update
   */
  export type ContenedoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContenedoresInclude<ExtArgs> | null
    /**
     * The data needed to update a Contenedores.
     */
    data: XOR<ContenedoresUpdateInput, ContenedoresUncheckedUpdateInput>
    /**
     * Choose, which Contenedores to update.
     */
    where: ContenedoresWhereUniqueInput
  }

  /**
   * Contenedores updateMany
   */
  export type ContenedoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contenedores.
     */
    data: XOR<ContenedoresUpdateManyMutationInput, ContenedoresUncheckedUpdateManyInput>
    /**
     * Filter which Contenedores to update
     */
    where?: ContenedoresWhereInput
    /**
     * Limit how many Contenedores to update.
     */
    limit?: number
  }

  /**
   * Contenedores updateManyAndReturn
   */
  export type ContenedoresUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * The data used to update Contenedores.
     */
    data: XOR<ContenedoresUpdateManyMutationInput, ContenedoresUncheckedUpdateManyInput>
    /**
     * Filter which Contenedores to update
     */
    where?: ContenedoresWhereInput
    /**
     * Limit how many Contenedores to update.
     */
    limit?: number
  }

  /**
   * Contenedores upsert
   */
  export type ContenedoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContenedoresInclude<ExtArgs> | null
    /**
     * The filter to search for the Contenedores to update in case it exists.
     */
    where: ContenedoresWhereUniqueInput
    /**
     * In case the Contenedores found by the `where` argument doesn't exist, create a new Contenedores with this data.
     */
    create: XOR<ContenedoresCreateInput, ContenedoresUncheckedCreateInput>
    /**
     * In case the Contenedores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContenedoresUpdateInput, ContenedoresUncheckedUpdateInput>
  }

  /**
   * Contenedores delete
   */
  export type ContenedoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContenedoresInclude<ExtArgs> | null
    /**
     * Filter which Contenedores to delete.
     */
    where: ContenedoresWhereUniqueInput
  }

  /**
   * Contenedores deleteMany
   */
  export type ContenedoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contenedores to delete
     */
    where?: ContenedoresWhereInput
    /**
     * Limit how many Contenedores to delete.
     */
    limit?: number
  }

  /**
   * Contenedores.sensores
   */
  export type Contenedores$sensoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresInclude<ExtArgs> | null
    where?: SensoresWhereInput
    orderBy?: SensoresOrderByWithRelationInput | SensoresOrderByWithRelationInput[]
    cursor?: SensoresWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SensoresScalarFieldEnum | SensoresScalarFieldEnum[]
  }

  /**
   * Contenedores.formularios
   */
  export type Contenedores$formulariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosInclude<ExtArgs> | null
    where?: FormulariosWhereInput
    orderBy?: FormulariosOrderByWithRelationInput | FormulariosOrderByWithRelationInput[]
    cursor?: FormulariosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FormulariosScalarFieldEnum | FormulariosScalarFieldEnum[]
  }

  /**
   * Contenedores.tareas
   */
  export type Contenedores$tareasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    where?: TareasWhereInput
    orderBy?: TareasOrderByWithRelationInput | TareasOrderByWithRelationInput[]
    cursor?: TareasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TareasScalarFieldEnum | TareasScalarFieldEnum[]
  }

  /**
   * Contenedores without action
   */
  export type ContenedoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contenedores
     */
    select?: ContenedoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contenedores
     */
    omit?: ContenedoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContenedoresInclude<ExtArgs> | null
  }


  /**
   * Model Rutas
   */

  export type AggregateRutas = {
    _count: RutasCountAggregateOutputType | null
    _avg: RutasAvgAggregateOutputType | null
    _sum: RutasSumAggregateOutputType | null
    _min: RutasMinAggregateOutputType | null
    _max: RutasMaxAggregateOutputType | null
  }

  export type RutasAvgAggregateOutputType = {
    id: number | null
    cr_conductor_id: number | null
  }

  export type RutasSumAggregateOutputType = {
    id: bigint | null
    cr_conductor_id: bigint | null
  }

  export type RutasMinAggregateOutputType = {
    id: bigint | null
    cr_conductor_id: bigint | null
    cr_fecha: Date | null
    cr_detalles: string | null
  }

  export type RutasMaxAggregateOutputType = {
    id: bigint | null
    cr_conductor_id: bigint | null
    cr_fecha: Date | null
    cr_detalles: string | null
  }

  export type RutasCountAggregateOutputType = {
    id: number
    cr_conductor_id: number
    cr_fecha: number
    cr_detalles: number
    _all: number
  }


  export type RutasAvgAggregateInputType = {
    id?: true
    cr_conductor_id?: true
  }

  export type RutasSumAggregateInputType = {
    id?: true
    cr_conductor_id?: true
  }

  export type RutasMinAggregateInputType = {
    id?: true
    cr_conductor_id?: true
    cr_fecha?: true
    cr_detalles?: true
  }

  export type RutasMaxAggregateInputType = {
    id?: true
    cr_conductor_id?: true
    cr_fecha?: true
    cr_detalles?: true
  }

  export type RutasCountAggregateInputType = {
    id?: true
    cr_conductor_id?: true
    cr_fecha?: true
    cr_detalles?: true
    _all?: true
  }

  export type RutasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rutas to aggregate.
     */
    where?: RutasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rutas to fetch.
     */
    orderBy?: RutasOrderByWithRelationInput | RutasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RutasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rutas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rutas
    **/
    _count?: true | RutasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RutasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RutasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RutasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RutasMaxAggregateInputType
  }

  export type GetRutasAggregateType<T extends RutasAggregateArgs> = {
        [P in keyof T & keyof AggregateRutas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRutas[P]>
      : GetScalarType<T[P], AggregateRutas[P]>
  }




  export type RutasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RutasWhereInput
    orderBy?: RutasOrderByWithAggregationInput | RutasOrderByWithAggregationInput[]
    by: RutasScalarFieldEnum[] | RutasScalarFieldEnum
    having?: RutasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RutasCountAggregateInputType | true
    _avg?: RutasAvgAggregateInputType
    _sum?: RutasSumAggregateInputType
    _min?: RutasMinAggregateInputType
    _max?: RutasMaxAggregateInputType
  }

  export type RutasGroupByOutputType = {
    id: bigint
    cr_conductor_id: bigint
    cr_fecha: Date
    cr_detalles: string | null
    _count: RutasCountAggregateOutputType | null
    _avg: RutasAvgAggregateOutputType | null
    _sum: RutasSumAggregateOutputType | null
    _min: RutasMinAggregateOutputType | null
    _max: RutasMaxAggregateOutputType | null
  }

  type GetRutasGroupByPayload<T extends RutasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RutasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RutasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RutasGroupByOutputType[P]>
            : GetScalarType<T[P], RutasGroupByOutputType[P]>
        }
      >
    >


  export type RutasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_conductor_id?: boolean
    cr_fecha?: boolean
    cr_detalles?: boolean
    conductor?: boolean | ConductoresDefaultArgs<ExtArgs>
    tareas?: boolean | Rutas$tareasArgs<ExtArgs>
    _count?: boolean | RutasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rutas"]>

  export type RutasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_conductor_id?: boolean
    cr_fecha?: boolean
    cr_detalles?: boolean
    conductor?: boolean | ConductoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rutas"]>

  export type RutasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_conductor_id?: boolean
    cr_fecha?: boolean
    cr_detalles?: boolean
    conductor?: boolean | ConductoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rutas"]>

  export type RutasSelectScalar = {
    id?: boolean
    cr_conductor_id?: boolean
    cr_fecha?: boolean
    cr_detalles?: boolean
  }

  export type RutasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cr_conductor_id" | "cr_fecha" | "cr_detalles", ExtArgs["result"]["rutas"]>
  export type RutasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conductor?: boolean | ConductoresDefaultArgs<ExtArgs>
    tareas?: boolean | Rutas$tareasArgs<ExtArgs>
    _count?: boolean | RutasCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RutasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conductor?: boolean | ConductoresDefaultArgs<ExtArgs>
  }
  export type RutasIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conductor?: boolean | ConductoresDefaultArgs<ExtArgs>
  }

  export type $RutasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rutas"
    objects: {
      conductor: Prisma.$ConductoresPayload<ExtArgs>
      tareas: Prisma.$TareasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      cr_conductor_id: bigint
      cr_fecha: Date
      cr_detalles: string | null
    }, ExtArgs["result"]["rutas"]>
    composites: {}
  }

  type RutasGetPayload<S extends boolean | null | undefined | RutasDefaultArgs> = $Result.GetResult<Prisma.$RutasPayload, S>

  type RutasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RutasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RutasCountAggregateInputType | true
    }

  export interface RutasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rutas'], meta: { name: 'Rutas' } }
    /**
     * Find zero or one Rutas that matches the filter.
     * @param {RutasFindUniqueArgs} args - Arguments to find a Rutas
     * @example
     * // Get one Rutas
     * const rutas = await prisma.rutas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RutasFindUniqueArgs>(args: SelectSubset<T, RutasFindUniqueArgs<ExtArgs>>): Prisma__RutasClient<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Rutas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RutasFindUniqueOrThrowArgs} args - Arguments to find a Rutas
     * @example
     * // Get one Rutas
     * const rutas = await prisma.rutas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RutasFindUniqueOrThrowArgs>(args: SelectSubset<T, RutasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RutasClient<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rutas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutasFindFirstArgs} args - Arguments to find a Rutas
     * @example
     * // Get one Rutas
     * const rutas = await prisma.rutas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RutasFindFirstArgs>(args?: SelectSubset<T, RutasFindFirstArgs<ExtArgs>>): Prisma__RutasClient<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rutas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutasFindFirstOrThrowArgs} args - Arguments to find a Rutas
     * @example
     * // Get one Rutas
     * const rutas = await prisma.rutas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RutasFindFirstOrThrowArgs>(args?: SelectSubset<T, RutasFindFirstOrThrowArgs<ExtArgs>>): Prisma__RutasClient<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rutas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rutas
     * const rutas = await prisma.rutas.findMany()
     * 
     * // Get first 10 Rutas
     * const rutas = await prisma.rutas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rutasWithIdOnly = await prisma.rutas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RutasFindManyArgs>(args?: SelectSubset<T, RutasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Rutas.
     * @param {RutasCreateArgs} args - Arguments to create a Rutas.
     * @example
     * // Create one Rutas
     * const Rutas = await prisma.rutas.create({
     *   data: {
     *     // ... data to create a Rutas
     *   }
     * })
     * 
     */
    create<T extends RutasCreateArgs>(args: SelectSubset<T, RutasCreateArgs<ExtArgs>>): Prisma__RutasClient<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rutas.
     * @param {RutasCreateManyArgs} args - Arguments to create many Rutas.
     * @example
     * // Create many Rutas
     * const rutas = await prisma.rutas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RutasCreateManyArgs>(args?: SelectSubset<T, RutasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rutas and returns the data saved in the database.
     * @param {RutasCreateManyAndReturnArgs} args - Arguments to create many Rutas.
     * @example
     * // Create many Rutas
     * const rutas = await prisma.rutas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rutas and only return the `id`
     * const rutasWithIdOnly = await prisma.rutas.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RutasCreateManyAndReturnArgs>(args?: SelectSubset<T, RutasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Rutas.
     * @param {RutasDeleteArgs} args - Arguments to delete one Rutas.
     * @example
     * // Delete one Rutas
     * const Rutas = await prisma.rutas.delete({
     *   where: {
     *     // ... filter to delete one Rutas
     *   }
     * })
     * 
     */
    delete<T extends RutasDeleteArgs>(args: SelectSubset<T, RutasDeleteArgs<ExtArgs>>): Prisma__RutasClient<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Rutas.
     * @param {RutasUpdateArgs} args - Arguments to update one Rutas.
     * @example
     * // Update one Rutas
     * const rutas = await prisma.rutas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RutasUpdateArgs>(args: SelectSubset<T, RutasUpdateArgs<ExtArgs>>): Prisma__RutasClient<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rutas.
     * @param {RutasDeleteManyArgs} args - Arguments to filter Rutas to delete.
     * @example
     * // Delete a few Rutas
     * const { count } = await prisma.rutas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RutasDeleteManyArgs>(args?: SelectSubset<T, RutasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rutas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rutas
     * const rutas = await prisma.rutas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RutasUpdateManyArgs>(args: SelectSubset<T, RutasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rutas and returns the data updated in the database.
     * @param {RutasUpdateManyAndReturnArgs} args - Arguments to update many Rutas.
     * @example
     * // Update many Rutas
     * const rutas = await prisma.rutas.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rutas and only return the `id`
     * const rutasWithIdOnly = await prisma.rutas.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RutasUpdateManyAndReturnArgs>(args: SelectSubset<T, RutasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Rutas.
     * @param {RutasUpsertArgs} args - Arguments to update or create a Rutas.
     * @example
     * // Update or create a Rutas
     * const rutas = await prisma.rutas.upsert({
     *   create: {
     *     // ... data to create a Rutas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rutas we want to update
     *   }
     * })
     */
    upsert<T extends RutasUpsertArgs>(args: SelectSubset<T, RutasUpsertArgs<ExtArgs>>): Prisma__RutasClient<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rutas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutasCountArgs} args - Arguments to filter Rutas to count.
     * @example
     * // Count the number of Rutas
     * const count = await prisma.rutas.count({
     *   where: {
     *     // ... the filter for the Rutas we want to count
     *   }
     * })
    **/
    count<T extends RutasCountArgs>(
      args?: Subset<T, RutasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RutasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rutas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RutasAggregateArgs>(args: Subset<T, RutasAggregateArgs>): Prisma.PrismaPromise<GetRutasAggregateType<T>>

    /**
     * Group by Rutas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RutasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RutasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RutasGroupByArgs['orderBy'] }
        : { orderBy?: RutasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RutasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRutasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rutas model
   */
  readonly fields: RutasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rutas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RutasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conductor<T extends ConductoresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConductoresDefaultArgs<ExtArgs>>): Prisma__ConductoresClient<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tareas<T extends Rutas$tareasArgs<ExtArgs> = {}>(args?: Subset<T, Rutas$tareasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rutas model
   */ 
  interface RutasFieldRefs {
    readonly id: FieldRef<"Rutas", 'BigInt'>
    readonly cr_conductor_id: FieldRef<"Rutas", 'BigInt'>
    readonly cr_fecha: FieldRef<"Rutas", 'DateTime'>
    readonly cr_detalles: FieldRef<"Rutas", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Rutas findUnique
   */
  export type RutasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasInclude<ExtArgs> | null
    /**
     * Filter, which Rutas to fetch.
     */
    where: RutasWhereUniqueInput
  }

  /**
   * Rutas findUniqueOrThrow
   */
  export type RutasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasInclude<ExtArgs> | null
    /**
     * Filter, which Rutas to fetch.
     */
    where: RutasWhereUniqueInput
  }

  /**
   * Rutas findFirst
   */
  export type RutasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasInclude<ExtArgs> | null
    /**
     * Filter, which Rutas to fetch.
     */
    where?: RutasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rutas to fetch.
     */
    orderBy?: RutasOrderByWithRelationInput | RutasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rutas.
     */
    cursor?: RutasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rutas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rutas.
     */
    distinct?: RutasScalarFieldEnum | RutasScalarFieldEnum[]
  }

  /**
   * Rutas findFirstOrThrow
   */
  export type RutasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasInclude<ExtArgs> | null
    /**
     * Filter, which Rutas to fetch.
     */
    where?: RutasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rutas to fetch.
     */
    orderBy?: RutasOrderByWithRelationInput | RutasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rutas.
     */
    cursor?: RutasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rutas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rutas.
     */
    distinct?: RutasScalarFieldEnum | RutasScalarFieldEnum[]
  }

  /**
   * Rutas findMany
   */
  export type RutasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasInclude<ExtArgs> | null
    /**
     * Filter, which Rutas to fetch.
     */
    where?: RutasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rutas to fetch.
     */
    orderBy?: RutasOrderByWithRelationInput | RutasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rutas.
     */
    cursor?: RutasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rutas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rutas.
     */
    skip?: number
    distinct?: RutasScalarFieldEnum | RutasScalarFieldEnum[]
  }

  /**
   * Rutas create
   */
  export type RutasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasInclude<ExtArgs> | null
    /**
     * The data needed to create a Rutas.
     */
    data: XOR<RutasCreateInput, RutasUncheckedCreateInput>
  }

  /**
   * Rutas createMany
   */
  export type RutasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rutas.
     */
    data: RutasCreateManyInput | RutasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rutas createManyAndReturn
   */
  export type RutasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * The data used to create many Rutas.
     */
    data: RutasCreateManyInput | RutasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rutas update
   */
  export type RutasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasInclude<ExtArgs> | null
    /**
     * The data needed to update a Rutas.
     */
    data: XOR<RutasUpdateInput, RutasUncheckedUpdateInput>
    /**
     * Choose, which Rutas to update.
     */
    where: RutasWhereUniqueInput
  }

  /**
   * Rutas updateMany
   */
  export type RutasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rutas.
     */
    data: XOR<RutasUpdateManyMutationInput, RutasUncheckedUpdateManyInput>
    /**
     * Filter which Rutas to update
     */
    where?: RutasWhereInput
    /**
     * Limit how many Rutas to update.
     */
    limit?: number
  }

  /**
   * Rutas updateManyAndReturn
   */
  export type RutasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * The data used to update Rutas.
     */
    data: XOR<RutasUpdateManyMutationInput, RutasUncheckedUpdateManyInput>
    /**
     * Filter which Rutas to update
     */
    where?: RutasWhereInput
    /**
     * Limit how many Rutas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rutas upsert
   */
  export type RutasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasInclude<ExtArgs> | null
    /**
     * The filter to search for the Rutas to update in case it exists.
     */
    where: RutasWhereUniqueInput
    /**
     * In case the Rutas found by the `where` argument doesn't exist, create a new Rutas with this data.
     */
    create: XOR<RutasCreateInput, RutasUncheckedCreateInput>
    /**
     * In case the Rutas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RutasUpdateInput, RutasUncheckedUpdateInput>
  }

  /**
   * Rutas delete
   */
  export type RutasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasInclude<ExtArgs> | null
    /**
     * Filter which Rutas to delete.
     */
    where: RutasWhereUniqueInput
  }

  /**
   * Rutas deleteMany
   */
  export type RutasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rutas to delete
     */
    where?: RutasWhereInput
    /**
     * Limit how many Rutas to delete.
     */
    limit?: number
  }

  /**
   * Rutas.tareas
   */
  export type Rutas$tareasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    where?: TareasWhereInput
    orderBy?: TareasOrderByWithRelationInput | TareasOrderByWithRelationInput[]
    cursor?: TareasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TareasScalarFieldEnum | TareasScalarFieldEnum[]
  }

  /**
   * Rutas without action
   */
  export type RutasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rutas
     */
    select?: RutasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rutas
     */
    omit?: RutasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RutasInclude<ExtArgs> | null
  }


  /**
   * Model Formularios
   */

  export type AggregateFormularios = {
    _count: FormulariosCountAggregateOutputType | null
    _avg: FormulariosAvgAggregateOutputType | null
    _sum: FormulariosSumAggregateOutputType | null
    _min: FormulariosMinAggregateOutputType | null
    _max: FormulariosMaxAggregateOutputType | null
  }

  export type FormulariosAvgAggregateOutputType = {
    id: number | null
    cr_contenedor_id: number | null
  }

  export type FormulariosSumAggregateOutputType = {
    id: bigint | null
    cr_contenedor_id: bigint | null
  }

  export type FormulariosMinAggregateOutputType = {
    id: bigint | null
    cr_contenedor_id: bigint | null
    cr_fecha: Date | null
    cr_problema: string | null
    cr_descripcion: string | null
  }

  export type FormulariosMaxAggregateOutputType = {
    id: bigint | null
    cr_contenedor_id: bigint | null
    cr_fecha: Date | null
    cr_problema: string | null
    cr_descripcion: string | null
  }

  export type FormulariosCountAggregateOutputType = {
    id: number
    cr_contenedor_id: number
    cr_fecha: number
    cr_problema: number
    cr_descripcion: number
    _all: number
  }


  export type FormulariosAvgAggregateInputType = {
    id?: true
    cr_contenedor_id?: true
  }

  export type FormulariosSumAggregateInputType = {
    id?: true
    cr_contenedor_id?: true
  }

  export type FormulariosMinAggregateInputType = {
    id?: true
    cr_contenedor_id?: true
    cr_fecha?: true
    cr_problema?: true
    cr_descripcion?: true
  }

  export type FormulariosMaxAggregateInputType = {
    id?: true
    cr_contenedor_id?: true
    cr_fecha?: true
    cr_problema?: true
    cr_descripcion?: true
  }

  export type FormulariosCountAggregateInputType = {
    id?: true
    cr_contenedor_id?: true
    cr_fecha?: true
    cr_problema?: true
    cr_descripcion?: true
    _all?: true
  }

  export type FormulariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Formularios to aggregate.
     */
    where?: FormulariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formularios to fetch.
     */
    orderBy?: FormulariosOrderByWithRelationInput | FormulariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormulariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formularios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formularios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Formularios
    **/
    _count?: true | FormulariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FormulariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FormulariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormulariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormulariosMaxAggregateInputType
  }

  export type GetFormulariosAggregateType<T extends FormulariosAggregateArgs> = {
        [P in keyof T & keyof AggregateFormularios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormularios[P]>
      : GetScalarType<T[P], AggregateFormularios[P]>
  }




  export type FormulariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormulariosWhereInput
    orderBy?: FormulariosOrderByWithAggregationInput | FormulariosOrderByWithAggregationInput[]
    by: FormulariosScalarFieldEnum[] | FormulariosScalarFieldEnum
    having?: FormulariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormulariosCountAggregateInputType | true
    _avg?: FormulariosAvgAggregateInputType
    _sum?: FormulariosSumAggregateInputType
    _min?: FormulariosMinAggregateInputType
    _max?: FormulariosMaxAggregateInputType
  }

  export type FormulariosGroupByOutputType = {
    id: bigint
    cr_contenedor_id: bigint
    cr_fecha: Date
    cr_problema: string | null
    cr_descripcion: string | null
    _count: FormulariosCountAggregateOutputType | null
    _avg: FormulariosAvgAggregateOutputType | null
    _sum: FormulariosSumAggregateOutputType | null
    _min: FormulariosMinAggregateOutputType | null
    _max: FormulariosMaxAggregateOutputType | null
  }

  type GetFormulariosGroupByPayload<T extends FormulariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormulariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormulariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormulariosGroupByOutputType[P]>
            : GetScalarType<T[P], FormulariosGroupByOutputType[P]>
        }
      >
    >


  export type FormulariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_contenedor_id?: boolean
    cr_fecha?: boolean
    cr_problema?: boolean
    cr_descripcion?: boolean
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formularios"]>

  export type FormulariosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_contenedor_id?: boolean
    cr_fecha?: boolean
    cr_problema?: boolean
    cr_descripcion?: boolean
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formularios"]>

  export type FormulariosSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_contenedor_id?: boolean
    cr_fecha?: boolean
    cr_problema?: boolean
    cr_descripcion?: boolean
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formularios"]>

  export type FormulariosSelectScalar = {
    id?: boolean
    cr_contenedor_id?: boolean
    cr_fecha?: boolean
    cr_problema?: boolean
    cr_descripcion?: boolean
  }

  export type FormulariosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cr_contenedor_id" | "cr_fecha" | "cr_problema" | "cr_descripcion", ExtArgs["result"]["formularios"]>
  export type FormulariosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
  }
  export type FormulariosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
  }
  export type FormulariosIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
  }

  export type $FormulariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Formularios"
    objects: {
      contenedor: Prisma.$ContenedoresPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      cr_contenedor_id: bigint
      cr_fecha: Date
      cr_problema: string | null
      cr_descripcion: string | null
    }, ExtArgs["result"]["formularios"]>
    composites: {}
  }

  type FormulariosGetPayload<S extends boolean | null | undefined | FormulariosDefaultArgs> = $Result.GetResult<Prisma.$FormulariosPayload, S>

  type FormulariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FormulariosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FormulariosCountAggregateInputType | true
    }

  export interface FormulariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Formularios'], meta: { name: 'Formularios' } }
    /**
     * Find zero or one Formularios that matches the filter.
     * @param {FormulariosFindUniqueArgs} args - Arguments to find a Formularios
     * @example
     * // Get one Formularios
     * const formularios = await prisma.formularios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormulariosFindUniqueArgs>(args: SelectSubset<T, FormulariosFindUniqueArgs<ExtArgs>>): Prisma__FormulariosClient<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Formularios that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FormulariosFindUniqueOrThrowArgs} args - Arguments to find a Formularios
     * @example
     * // Get one Formularios
     * const formularios = await prisma.formularios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormulariosFindUniqueOrThrowArgs>(args: SelectSubset<T, FormulariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormulariosClient<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Formularios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulariosFindFirstArgs} args - Arguments to find a Formularios
     * @example
     * // Get one Formularios
     * const formularios = await prisma.formularios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormulariosFindFirstArgs>(args?: SelectSubset<T, FormulariosFindFirstArgs<ExtArgs>>): Prisma__FormulariosClient<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Formularios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulariosFindFirstOrThrowArgs} args - Arguments to find a Formularios
     * @example
     * // Get one Formularios
     * const formularios = await prisma.formularios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormulariosFindFirstOrThrowArgs>(args?: SelectSubset<T, FormulariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormulariosClient<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Formularios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Formularios
     * const formularios = await prisma.formularios.findMany()
     * 
     * // Get first 10 Formularios
     * const formularios = await prisma.formularios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formulariosWithIdOnly = await prisma.formularios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormulariosFindManyArgs>(args?: SelectSubset<T, FormulariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Formularios.
     * @param {FormulariosCreateArgs} args - Arguments to create a Formularios.
     * @example
     * // Create one Formularios
     * const Formularios = await prisma.formularios.create({
     *   data: {
     *     // ... data to create a Formularios
     *   }
     * })
     * 
     */
    create<T extends FormulariosCreateArgs>(args: SelectSubset<T, FormulariosCreateArgs<ExtArgs>>): Prisma__FormulariosClient<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Formularios.
     * @param {FormulariosCreateManyArgs} args - Arguments to create many Formularios.
     * @example
     * // Create many Formularios
     * const formularios = await prisma.formularios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormulariosCreateManyArgs>(args?: SelectSubset<T, FormulariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Formularios and returns the data saved in the database.
     * @param {FormulariosCreateManyAndReturnArgs} args - Arguments to create many Formularios.
     * @example
     * // Create many Formularios
     * const formularios = await prisma.formularios.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Formularios and only return the `id`
     * const formulariosWithIdOnly = await prisma.formularios.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormulariosCreateManyAndReturnArgs>(args?: SelectSubset<T, FormulariosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Formularios.
     * @param {FormulariosDeleteArgs} args - Arguments to delete one Formularios.
     * @example
     * // Delete one Formularios
     * const Formularios = await prisma.formularios.delete({
     *   where: {
     *     // ... filter to delete one Formularios
     *   }
     * })
     * 
     */
    delete<T extends FormulariosDeleteArgs>(args: SelectSubset<T, FormulariosDeleteArgs<ExtArgs>>): Prisma__FormulariosClient<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Formularios.
     * @param {FormulariosUpdateArgs} args - Arguments to update one Formularios.
     * @example
     * // Update one Formularios
     * const formularios = await prisma.formularios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormulariosUpdateArgs>(args: SelectSubset<T, FormulariosUpdateArgs<ExtArgs>>): Prisma__FormulariosClient<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Formularios.
     * @param {FormulariosDeleteManyArgs} args - Arguments to filter Formularios to delete.
     * @example
     * // Delete a few Formularios
     * const { count } = await prisma.formularios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormulariosDeleteManyArgs>(args?: SelectSubset<T, FormulariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Formularios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Formularios
     * const formularios = await prisma.formularios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormulariosUpdateManyArgs>(args: SelectSubset<T, FormulariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Formularios and returns the data updated in the database.
     * @param {FormulariosUpdateManyAndReturnArgs} args - Arguments to update many Formularios.
     * @example
     * // Update many Formularios
     * const formularios = await prisma.formularios.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Formularios and only return the `id`
     * const formulariosWithIdOnly = await prisma.formularios.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FormulariosUpdateManyAndReturnArgs>(args: SelectSubset<T, FormulariosUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Formularios.
     * @param {FormulariosUpsertArgs} args - Arguments to update or create a Formularios.
     * @example
     * // Update or create a Formularios
     * const formularios = await prisma.formularios.upsert({
     *   create: {
     *     // ... data to create a Formularios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Formularios we want to update
     *   }
     * })
     */
    upsert<T extends FormulariosUpsertArgs>(args: SelectSubset<T, FormulariosUpsertArgs<ExtArgs>>): Prisma__FormulariosClient<$Result.GetResult<Prisma.$FormulariosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Formularios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulariosCountArgs} args - Arguments to filter Formularios to count.
     * @example
     * // Count the number of Formularios
     * const count = await prisma.formularios.count({
     *   where: {
     *     // ... the filter for the Formularios we want to count
     *   }
     * })
    **/
    count<T extends FormulariosCountArgs>(
      args?: Subset<T, FormulariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormulariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Formularios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormulariosAggregateArgs>(args: Subset<T, FormulariosAggregateArgs>): Prisma.PrismaPromise<GetFormulariosAggregateType<T>>

    /**
     * Group by Formularios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormulariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormulariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormulariosGroupByArgs['orderBy'] }
        : { orderBy?: FormulariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormulariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormulariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Formularios model
   */
  readonly fields: FormulariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Formularios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormulariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contenedor<T extends ContenedoresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContenedoresDefaultArgs<ExtArgs>>): Prisma__ContenedoresClient<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Formularios model
   */ 
  interface FormulariosFieldRefs {
    readonly id: FieldRef<"Formularios", 'BigInt'>
    readonly cr_contenedor_id: FieldRef<"Formularios", 'BigInt'>
    readonly cr_fecha: FieldRef<"Formularios", 'DateTime'>
    readonly cr_problema: FieldRef<"Formularios", 'String'>
    readonly cr_descripcion: FieldRef<"Formularios", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Formularios findUnique
   */
  export type FormulariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosInclude<ExtArgs> | null
    /**
     * Filter, which Formularios to fetch.
     */
    where: FormulariosWhereUniqueInput
  }

  /**
   * Formularios findUniqueOrThrow
   */
  export type FormulariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosInclude<ExtArgs> | null
    /**
     * Filter, which Formularios to fetch.
     */
    where: FormulariosWhereUniqueInput
  }

  /**
   * Formularios findFirst
   */
  export type FormulariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosInclude<ExtArgs> | null
    /**
     * Filter, which Formularios to fetch.
     */
    where?: FormulariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formularios to fetch.
     */
    orderBy?: FormulariosOrderByWithRelationInput | FormulariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Formularios.
     */
    cursor?: FormulariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formularios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formularios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Formularios.
     */
    distinct?: FormulariosScalarFieldEnum | FormulariosScalarFieldEnum[]
  }

  /**
   * Formularios findFirstOrThrow
   */
  export type FormulariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosInclude<ExtArgs> | null
    /**
     * Filter, which Formularios to fetch.
     */
    where?: FormulariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formularios to fetch.
     */
    orderBy?: FormulariosOrderByWithRelationInput | FormulariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Formularios.
     */
    cursor?: FormulariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formularios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formularios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Formularios.
     */
    distinct?: FormulariosScalarFieldEnum | FormulariosScalarFieldEnum[]
  }

  /**
   * Formularios findMany
   */
  export type FormulariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosInclude<ExtArgs> | null
    /**
     * Filter, which Formularios to fetch.
     */
    where?: FormulariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Formularios to fetch.
     */
    orderBy?: FormulariosOrderByWithRelationInput | FormulariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Formularios.
     */
    cursor?: FormulariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Formularios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Formularios.
     */
    skip?: number
    distinct?: FormulariosScalarFieldEnum | FormulariosScalarFieldEnum[]
  }

  /**
   * Formularios create
   */
  export type FormulariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosInclude<ExtArgs> | null
    /**
     * The data needed to create a Formularios.
     */
    data: XOR<FormulariosCreateInput, FormulariosUncheckedCreateInput>
  }

  /**
   * Formularios createMany
   */
  export type FormulariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Formularios.
     */
    data: FormulariosCreateManyInput | FormulariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Formularios createManyAndReturn
   */
  export type FormulariosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * The data used to create many Formularios.
     */
    data: FormulariosCreateManyInput | FormulariosCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Formularios update
   */
  export type FormulariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosInclude<ExtArgs> | null
    /**
     * The data needed to update a Formularios.
     */
    data: XOR<FormulariosUpdateInput, FormulariosUncheckedUpdateInput>
    /**
     * Choose, which Formularios to update.
     */
    where: FormulariosWhereUniqueInput
  }

  /**
   * Formularios updateMany
   */
  export type FormulariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Formularios.
     */
    data: XOR<FormulariosUpdateManyMutationInput, FormulariosUncheckedUpdateManyInput>
    /**
     * Filter which Formularios to update
     */
    where?: FormulariosWhereInput
    /**
     * Limit how many Formularios to update.
     */
    limit?: number
  }

  /**
   * Formularios updateManyAndReturn
   */
  export type FormulariosUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * The data used to update Formularios.
     */
    data: XOR<FormulariosUpdateManyMutationInput, FormulariosUncheckedUpdateManyInput>
    /**
     * Filter which Formularios to update
     */
    where?: FormulariosWhereInput
    /**
     * Limit how many Formularios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Formularios upsert
   */
  export type FormulariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosInclude<ExtArgs> | null
    /**
     * The filter to search for the Formularios to update in case it exists.
     */
    where: FormulariosWhereUniqueInput
    /**
     * In case the Formularios found by the `where` argument doesn't exist, create a new Formularios with this data.
     */
    create: XOR<FormulariosCreateInput, FormulariosUncheckedCreateInput>
    /**
     * In case the Formularios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormulariosUpdateInput, FormulariosUncheckedUpdateInput>
  }

  /**
   * Formularios delete
   */
  export type FormulariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosInclude<ExtArgs> | null
    /**
     * Filter which Formularios to delete.
     */
    where: FormulariosWhereUniqueInput
  }

  /**
   * Formularios deleteMany
   */
  export type FormulariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Formularios to delete
     */
    where?: FormulariosWhereInput
    /**
     * Limit how many Formularios to delete.
     */
    limit?: number
  }

  /**
   * Formularios without action
   */
  export type FormulariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Formularios
     */
    select?: FormulariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Formularios
     */
    omit?: FormulariosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormulariosInclude<ExtArgs> | null
  }


  /**
   * Model Sensores
   */

  export type AggregateSensores = {
    _count: SensoresCountAggregateOutputType | null
    _avg: SensoresAvgAggregateOutputType | null
    _sum: SensoresSumAggregateOutputType | null
    _min: SensoresMinAggregateOutputType | null
    _max: SensoresMaxAggregateOutputType | null
  }

  export type SensoresAvgAggregateOutputType = {
    id: number | null
    cr_contenedor_id: number | null
  }

  export type SensoresSumAggregateOutputType = {
    id: bigint | null
    cr_contenedor_id: bigint | null
  }

  export type SensoresMinAggregateOutputType = {
    id: bigint | null
    cr_contenedor_id: bigint | null
  }

  export type SensoresMaxAggregateOutputType = {
    id: bigint | null
    cr_contenedor_id: bigint | null
  }

  export type SensoresCountAggregateOutputType = {
    id: number
    cr_contenedor_id: number
    _all: number
  }


  export type SensoresAvgAggregateInputType = {
    id?: true
    cr_contenedor_id?: true
  }

  export type SensoresSumAggregateInputType = {
    id?: true
    cr_contenedor_id?: true
  }

  export type SensoresMinAggregateInputType = {
    id?: true
    cr_contenedor_id?: true
  }

  export type SensoresMaxAggregateInputType = {
    id?: true
    cr_contenedor_id?: true
  }

  export type SensoresCountAggregateInputType = {
    id?: true
    cr_contenedor_id?: true
    _all?: true
  }

  export type SensoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sensores to aggregate.
     */
    where?: SensoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensores to fetch.
     */
    orderBy?: SensoresOrderByWithRelationInput | SensoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SensoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sensores
    **/
    _count?: true | SensoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SensoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SensoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SensoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SensoresMaxAggregateInputType
  }

  export type GetSensoresAggregateType<T extends SensoresAggregateArgs> = {
        [P in keyof T & keyof AggregateSensores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSensores[P]>
      : GetScalarType<T[P], AggregateSensores[P]>
  }




  export type SensoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SensoresWhereInput
    orderBy?: SensoresOrderByWithAggregationInput | SensoresOrderByWithAggregationInput[]
    by: SensoresScalarFieldEnum[] | SensoresScalarFieldEnum
    having?: SensoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SensoresCountAggregateInputType | true
    _avg?: SensoresAvgAggregateInputType
    _sum?: SensoresSumAggregateInputType
    _min?: SensoresMinAggregateInputType
    _max?: SensoresMaxAggregateInputType
  }

  export type SensoresGroupByOutputType = {
    id: bigint
    cr_contenedor_id: bigint
    _count: SensoresCountAggregateOutputType | null
    _avg: SensoresAvgAggregateOutputType | null
    _sum: SensoresSumAggregateOutputType | null
    _min: SensoresMinAggregateOutputType | null
    _max: SensoresMaxAggregateOutputType | null
  }

  type GetSensoresGroupByPayload<T extends SensoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SensoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SensoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SensoresGroupByOutputType[P]>
            : GetScalarType<T[P], SensoresGroupByOutputType[P]>
        }
      >
    >


  export type SensoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_contenedor_id?: boolean
    lecturas?: boolean | Sensores$lecturasArgs<ExtArgs>
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
    _count?: boolean | SensoresCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sensores"]>

  export type SensoresSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_contenedor_id?: boolean
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sensores"]>

  export type SensoresSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_contenedor_id?: boolean
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sensores"]>

  export type SensoresSelectScalar = {
    id?: boolean
    cr_contenedor_id?: boolean
  }

  export type SensoresOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cr_contenedor_id", ExtArgs["result"]["sensores"]>
  export type SensoresInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lecturas?: boolean | Sensores$lecturasArgs<ExtArgs>
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
    _count?: boolean | SensoresCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SensoresIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
  }
  export type SensoresIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
  }

  export type $SensoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sensores"
    objects: {
      lecturas: Prisma.$LecturasPayload<ExtArgs>[]
      contenedor: Prisma.$ContenedoresPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      cr_contenedor_id: bigint
    }, ExtArgs["result"]["sensores"]>
    composites: {}
  }

  type SensoresGetPayload<S extends boolean | null | undefined | SensoresDefaultArgs> = $Result.GetResult<Prisma.$SensoresPayload, S>

  type SensoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SensoresFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SensoresCountAggregateInputType | true
    }

  export interface SensoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sensores'], meta: { name: 'Sensores' } }
    /**
     * Find zero or one Sensores that matches the filter.
     * @param {SensoresFindUniqueArgs} args - Arguments to find a Sensores
     * @example
     * // Get one Sensores
     * const sensores = await prisma.sensores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SensoresFindUniqueArgs>(args: SelectSubset<T, SensoresFindUniqueArgs<ExtArgs>>): Prisma__SensoresClient<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sensores that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SensoresFindUniqueOrThrowArgs} args - Arguments to find a Sensores
     * @example
     * // Get one Sensores
     * const sensores = await prisma.sensores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SensoresFindUniqueOrThrowArgs>(args: SelectSubset<T, SensoresFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SensoresClient<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sensores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensoresFindFirstArgs} args - Arguments to find a Sensores
     * @example
     * // Get one Sensores
     * const sensores = await prisma.sensores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SensoresFindFirstArgs>(args?: SelectSubset<T, SensoresFindFirstArgs<ExtArgs>>): Prisma__SensoresClient<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sensores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensoresFindFirstOrThrowArgs} args - Arguments to find a Sensores
     * @example
     * // Get one Sensores
     * const sensores = await prisma.sensores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SensoresFindFirstOrThrowArgs>(args?: SelectSubset<T, SensoresFindFirstOrThrowArgs<ExtArgs>>): Prisma__SensoresClient<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sensores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensoresFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sensores
     * const sensores = await prisma.sensores.findMany()
     * 
     * // Get first 10 Sensores
     * const sensores = await prisma.sensores.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sensoresWithIdOnly = await prisma.sensores.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SensoresFindManyArgs>(args?: SelectSubset<T, SensoresFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sensores.
     * @param {SensoresCreateArgs} args - Arguments to create a Sensores.
     * @example
     * // Create one Sensores
     * const Sensores = await prisma.sensores.create({
     *   data: {
     *     // ... data to create a Sensores
     *   }
     * })
     * 
     */
    create<T extends SensoresCreateArgs>(args: SelectSubset<T, SensoresCreateArgs<ExtArgs>>): Prisma__SensoresClient<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sensores.
     * @param {SensoresCreateManyArgs} args - Arguments to create many Sensores.
     * @example
     * // Create many Sensores
     * const sensores = await prisma.sensores.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SensoresCreateManyArgs>(args?: SelectSubset<T, SensoresCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sensores and returns the data saved in the database.
     * @param {SensoresCreateManyAndReturnArgs} args - Arguments to create many Sensores.
     * @example
     * // Create many Sensores
     * const sensores = await prisma.sensores.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sensores and only return the `id`
     * const sensoresWithIdOnly = await prisma.sensores.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SensoresCreateManyAndReturnArgs>(args?: SelectSubset<T, SensoresCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sensores.
     * @param {SensoresDeleteArgs} args - Arguments to delete one Sensores.
     * @example
     * // Delete one Sensores
     * const Sensores = await prisma.sensores.delete({
     *   where: {
     *     // ... filter to delete one Sensores
     *   }
     * })
     * 
     */
    delete<T extends SensoresDeleteArgs>(args: SelectSubset<T, SensoresDeleteArgs<ExtArgs>>): Prisma__SensoresClient<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sensores.
     * @param {SensoresUpdateArgs} args - Arguments to update one Sensores.
     * @example
     * // Update one Sensores
     * const sensores = await prisma.sensores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SensoresUpdateArgs>(args: SelectSubset<T, SensoresUpdateArgs<ExtArgs>>): Prisma__SensoresClient<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sensores.
     * @param {SensoresDeleteManyArgs} args - Arguments to filter Sensores to delete.
     * @example
     * // Delete a few Sensores
     * const { count } = await prisma.sensores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SensoresDeleteManyArgs>(args?: SelectSubset<T, SensoresDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sensores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sensores
     * const sensores = await prisma.sensores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SensoresUpdateManyArgs>(args: SelectSubset<T, SensoresUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sensores and returns the data updated in the database.
     * @param {SensoresUpdateManyAndReturnArgs} args - Arguments to update many Sensores.
     * @example
     * // Update many Sensores
     * const sensores = await prisma.sensores.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sensores and only return the `id`
     * const sensoresWithIdOnly = await prisma.sensores.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SensoresUpdateManyAndReturnArgs>(args: SelectSubset<T, SensoresUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sensores.
     * @param {SensoresUpsertArgs} args - Arguments to update or create a Sensores.
     * @example
     * // Update or create a Sensores
     * const sensores = await prisma.sensores.upsert({
     *   create: {
     *     // ... data to create a Sensores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sensores we want to update
     *   }
     * })
     */
    upsert<T extends SensoresUpsertArgs>(args: SelectSubset<T, SensoresUpsertArgs<ExtArgs>>): Prisma__SensoresClient<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sensores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensoresCountArgs} args - Arguments to filter Sensores to count.
     * @example
     * // Count the number of Sensores
     * const count = await prisma.sensores.count({
     *   where: {
     *     // ... the filter for the Sensores we want to count
     *   }
     * })
    **/
    count<T extends SensoresCountArgs>(
      args?: Subset<T, SensoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SensoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sensores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SensoresAggregateArgs>(args: Subset<T, SensoresAggregateArgs>): Prisma.PrismaPromise<GetSensoresAggregateType<T>>

    /**
     * Group by Sensores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SensoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SensoresGroupByArgs['orderBy'] }
        : { orderBy?: SensoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SensoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSensoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sensores model
   */
  readonly fields: SensoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sensores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SensoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lecturas<T extends Sensores$lecturasArgs<ExtArgs> = {}>(args?: Subset<T, Sensores$lecturasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contenedor<T extends ContenedoresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContenedoresDefaultArgs<ExtArgs>>): Prisma__ContenedoresClient<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sensores model
   */ 
  interface SensoresFieldRefs {
    readonly id: FieldRef<"Sensores", 'BigInt'>
    readonly cr_contenedor_id: FieldRef<"Sensores", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Sensores findUnique
   */
  export type SensoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresInclude<ExtArgs> | null
    /**
     * Filter, which Sensores to fetch.
     */
    where: SensoresWhereUniqueInput
  }

  /**
   * Sensores findUniqueOrThrow
   */
  export type SensoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresInclude<ExtArgs> | null
    /**
     * Filter, which Sensores to fetch.
     */
    where: SensoresWhereUniqueInput
  }

  /**
   * Sensores findFirst
   */
  export type SensoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresInclude<ExtArgs> | null
    /**
     * Filter, which Sensores to fetch.
     */
    where?: SensoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensores to fetch.
     */
    orderBy?: SensoresOrderByWithRelationInput | SensoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sensores.
     */
    cursor?: SensoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sensores.
     */
    distinct?: SensoresScalarFieldEnum | SensoresScalarFieldEnum[]
  }

  /**
   * Sensores findFirstOrThrow
   */
  export type SensoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresInclude<ExtArgs> | null
    /**
     * Filter, which Sensores to fetch.
     */
    where?: SensoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensores to fetch.
     */
    orderBy?: SensoresOrderByWithRelationInput | SensoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sensores.
     */
    cursor?: SensoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sensores.
     */
    distinct?: SensoresScalarFieldEnum | SensoresScalarFieldEnum[]
  }

  /**
   * Sensores findMany
   */
  export type SensoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresInclude<ExtArgs> | null
    /**
     * Filter, which Sensores to fetch.
     */
    where?: SensoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sensores to fetch.
     */
    orderBy?: SensoresOrderByWithRelationInput | SensoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sensores.
     */
    cursor?: SensoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sensores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sensores.
     */
    skip?: number
    distinct?: SensoresScalarFieldEnum | SensoresScalarFieldEnum[]
  }

  /**
   * Sensores create
   */
  export type SensoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresInclude<ExtArgs> | null
    /**
     * The data needed to create a Sensores.
     */
    data: XOR<SensoresCreateInput, SensoresUncheckedCreateInput>
  }

  /**
   * Sensores createMany
   */
  export type SensoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sensores.
     */
    data: SensoresCreateManyInput | SensoresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sensores createManyAndReturn
   */
  export type SensoresCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * The data used to create many Sensores.
     */
    data: SensoresCreateManyInput | SensoresCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sensores update
   */
  export type SensoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresInclude<ExtArgs> | null
    /**
     * The data needed to update a Sensores.
     */
    data: XOR<SensoresUpdateInput, SensoresUncheckedUpdateInput>
    /**
     * Choose, which Sensores to update.
     */
    where: SensoresWhereUniqueInput
  }

  /**
   * Sensores updateMany
   */
  export type SensoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sensores.
     */
    data: XOR<SensoresUpdateManyMutationInput, SensoresUncheckedUpdateManyInput>
    /**
     * Filter which Sensores to update
     */
    where?: SensoresWhereInput
    /**
     * Limit how many Sensores to update.
     */
    limit?: number
  }

  /**
   * Sensores updateManyAndReturn
   */
  export type SensoresUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * The data used to update Sensores.
     */
    data: XOR<SensoresUpdateManyMutationInput, SensoresUncheckedUpdateManyInput>
    /**
     * Filter which Sensores to update
     */
    where?: SensoresWhereInput
    /**
     * Limit how many Sensores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sensores upsert
   */
  export type SensoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresInclude<ExtArgs> | null
    /**
     * The filter to search for the Sensores to update in case it exists.
     */
    where: SensoresWhereUniqueInput
    /**
     * In case the Sensores found by the `where` argument doesn't exist, create a new Sensores with this data.
     */
    create: XOR<SensoresCreateInput, SensoresUncheckedCreateInput>
    /**
     * In case the Sensores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SensoresUpdateInput, SensoresUncheckedUpdateInput>
  }

  /**
   * Sensores delete
   */
  export type SensoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresInclude<ExtArgs> | null
    /**
     * Filter which Sensores to delete.
     */
    where: SensoresWhereUniqueInput
  }

  /**
   * Sensores deleteMany
   */
  export type SensoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sensores to delete
     */
    where?: SensoresWhereInput
    /**
     * Limit how many Sensores to delete.
     */
    limit?: number
  }

  /**
   * Sensores.lecturas
   */
  export type Sensores$lecturasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasInclude<ExtArgs> | null
    where?: LecturasWhereInput
    orderBy?: LecturasOrderByWithRelationInput | LecturasOrderByWithRelationInput[]
    cursor?: LecturasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LecturasScalarFieldEnum | LecturasScalarFieldEnum[]
  }

  /**
   * Sensores without action
   */
  export type SensoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sensores
     */
    select?: SensoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sensores
     */
    omit?: SensoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SensoresInclude<ExtArgs> | null
  }


  /**
   * Model Lecturas
   */

  export type AggregateLecturas = {
    _count: LecturasCountAggregateOutputType | null
    _avg: LecturasAvgAggregateOutputType | null
    _sum: LecturasSumAggregateOutputType | null
    _min: LecturasMinAggregateOutputType | null
    _max: LecturasMaxAggregateOutputType | null
  }

  export type LecturasAvgAggregateOutputType = {
    id: number | null
    cr_sensor_id: number | null
    cr_distancia: Decimal | null
  }

  export type LecturasSumAggregateOutputType = {
    id: bigint | null
    cr_sensor_id: bigint | null
    cr_distancia: Decimal | null
  }

  export type LecturasMinAggregateOutputType = {
    id: bigint | null
    cr_sensor_id: bigint | null
    cr_fecha: Date | null
    cr_distancia: Decimal | null
  }

  export type LecturasMaxAggregateOutputType = {
    id: bigint | null
    cr_sensor_id: bigint | null
    cr_fecha: Date | null
    cr_distancia: Decimal | null
  }

  export type LecturasCountAggregateOutputType = {
    id: number
    cr_sensor_id: number
    cr_fecha: number
    cr_distancia: number
    _all: number
  }


  export type LecturasAvgAggregateInputType = {
    id?: true
    cr_sensor_id?: true
    cr_distancia?: true
  }

  export type LecturasSumAggregateInputType = {
    id?: true
    cr_sensor_id?: true
    cr_distancia?: true
  }

  export type LecturasMinAggregateInputType = {
    id?: true
    cr_sensor_id?: true
    cr_fecha?: true
    cr_distancia?: true
  }

  export type LecturasMaxAggregateInputType = {
    id?: true
    cr_sensor_id?: true
    cr_fecha?: true
    cr_distancia?: true
  }

  export type LecturasCountAggregateInputType = {
    id?: true
    cr_sensor_id?: true
    cr_fecha?: true
    cr_distancia?: true
    _all?: true
  }

  export type LecturasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lecturas to aggregate.
     */
    where?: LecturasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lecturas to fetch.
     */
    orderBy?: LecturasOrderByWithRelationInput | LecturasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LecturasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lecturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lecturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lecturas
    **/
    _count?: true | LecturasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LecturasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LecturasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LecturasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LecturasMaxAggregateInputType
  }

  export type GetLecturasAggregateType<T extends LecturasAggregateArgs> = {
        [P in keyof T & keyof AggregateLecturas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLecturas[P]>
      : GetScalarType<T[P], AggregateLecturas[P]>
  }




  export type LecturasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LecturasWhereInput
    orderBy?: LecturasOrderByWithAggregationInput | LecturasOrderByWithAggregationInput[]
    by: LecturasScalarFieldEnum[] | LecturasScalarFieldEnum
    having?: LecturasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LecturasCountAggregateInputType | true
    _avg?: LecturasAvgAggregateInputType
    _sum?: LecturasSumAggregateInputType
    _min?: LecturasMinAggregateInputType
    _max?: LecturasMaxAggregateInputType
  }

  export type LecturasGroupByOutputType = {
    id: bigint
    cr_sensor_id: bigint
    cr_fecha: Date
    cr_distancia: Decimal
    _count: LecturasCountAggregateOutputType | null
    _avg: LecturasAvgAggregateOutputType | null
    _sum: LecturasSumAggregateOutputType | null
    _min: LecturasMinAggregateOutputType | null
    _max: LecturasMaxAggregateOutputType | null
  }

  type GetLecturasGroupByPayload<T extends LecturasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LecturasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LecturasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LecturasGroupByOutputType[P]>
            : GetScalarType<T[P], LecturasGroupByOutputType[P]>
        }
      >
    >


  export type LecturasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_sensor_id?: boolean
    cr_fecha?: boolean
    cr_distancia?: boolean
    sensor?: boolean | SensoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lecturas"]>

  export type LecturasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_sensor_id?: boolean
    cr_fecha?: boolean
    cr_distancia?: boolean
    sensor?: boolean | SensoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lecturas"]>

  export type LecturasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_sensor_id?: boolean
    cr_fecha?: boolean
    cr_distancia?: boolean
    sensor?: boolean | SensoresDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lecturas"]>

  export type LecturasSelectScalar = {
    id?: boolean
    cr_sensor_id?: boolean
    cr_fecha?: boolean
    cr_distancia?: boolean
  }

  export type LecturasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cr_sensor_id" | "cr_fecha" | "cr_distancia", ExtArgs["result"]["lecturas"]>
  export type LecturasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sensor?: boolean | SensoresDefaultArgs<ExtArgs>
  }
  export type LecturasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sensor?: boolean | SensoresDefaultArgs<ExtArgs>
  }
  export type LecturasIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sensor?: boolean | SensoresDefaultArgs<ExtArgs>
  }

  export type $LecturasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lecturas"
    objects: {
      sensor: Prisma.$SensoresPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      cr_sensor_id: bigint
      cr_fecha: Date
      cr_distancia: Prisma.Decimal
    }, ExtArgs["result"]["lecturas"]>
    composites: {}
  }

  type LecturasGetPayload<S extends boolean | null | undefined | LecturasDefaultArgs> = $Result.GetResult<Prisma.$LecturasPayload, S>

  type LecturasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LecturasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LecturasCountAggregateInputType | true
    }

  export interface LecturasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lecturas'], meta: { name: 'Lecturas' } }
    /**
     * Find zero or one Lecturas that matches the filter.
     * @param {LecturasFindUniqueArgs} args - Arguments to find a Lecturas
     * @example
     * // Get one Lecturas
     * const lecturas = await prisma.lecturas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LecturasFindUniqueArgs>(args: SelectSubset<T, LecturasFindUniqueArgs<ExtArgs>>): Prisma__LecturasClient<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lecturas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LecturasFindUniqueOrThrowArgs} args - Arguments to find a Lecturas
     * @example
     * // Get one Lecturas
     * const lecturas = await prisma.lecturas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LecturasFindUniqueOrThrowArgs>(args: SelectSubset<T, LecturasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LecturasClient<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lecturas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturasFindFirstArgs} args - Arguments to find a Lecturas
     * @example
     * // Get one Lecturas
     * const lecturas = await prisma.lecturas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LecturasFindFirstArgs>(args?: SelectSubset<T, LecturasFindFirstArgs<ExtArgs>>): Prisma__LecturasClient<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lecturas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturasFindFirstOrThrowArgs} args - Arguments to find a Lecturas
     * @example
     * // Get one Lecturas
     * const lecturas = await prisma.lecturas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LecturasFindFirstOrThrowArgs>(args?: SelectSubset<T, LecturasFindFirstOrThrowArgs<ExtArgs>>): Prisma__LecturasClient<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lecturas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lecturas
     * const lecturas = await prisma.lecturas.findMany()
     * 
     * // Get first 10 Lecturas
     * const lecturas = await prisma.lecturas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lecturasWithIdOnly = await prisma.lecturas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LecturasFindManyArgs>(args?: SelectSubset<T, LecturasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lecturas.
     * @param {LecturasCreateArgs} args - Arguments to create a Lecturas.
     * @example
     * // Create one Lecturas
     * const Lecturas = await prisma.lecturas.create({
     *   data: {
     *     // ... data to create a Lecturas
     *   }
     * })
     * 
     */
    create<T extends LecturasCreateArgs>(args: SelectSubset<T, LecturasCreateArgs<ExtArgs>>): Prisma__LecturasClient<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lecturas.
     * @param {LecturasCreateManyArgs} args - Arguments to create many Lecturas.
     * @example
     * // Create many Lecturas
     * const lecturas = await prisma.lecturas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LecturasCreateManyArgs>(args?: SelectSubset<T, LecturasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lecturas and returns the data saved in the database.
     * @param {LecturasCreateManyAndReturnArgs} args - Arguments to create many Lecturas.
     * @example
     * // Create many Lecturas
     * const lecturas = await prisma.lecturas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lecturas and only return the `id`
     * const lecturasWithIdOnly = await prisma.lecturas.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LecturasCreateManyAndReturnArgs>(args?: SelectSubset<T, LecturasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lecturas.
     * @param {LecturasDeleteArgs} args - Arguments to delete one Lecturas.
     * @example
     * // Delete one Lecturas
     * const Lecturas = await prisma.lecturas.delete({
     *   where: {
     *     // ... filter to delete one Lecturas
     *   }
     * })
     * 
     */
    delete<T extends LecturasDeleteArgs>(args: SelectSubset<T, LecturasDeleteArgs<ExtArgs>>): Prisma__LecturasClient<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lecturas.
     * @param {LecturasUpdateArgs} args - Arguments to update one Lecturas.
     * @example
     * // Update one Lecturas
     * const lecturas = await prisma.lecturas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LecturasUpdateArgs>(args: SelectSubset<T, LecturasUpdateArgs<ExtArgs>>): Prisma__LecturasClient<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lecturas.
     * @param {LecturasDeleteManyArgs} args - Arguments to filter Lecturas to delete.
     * @example
     * // Delete a few Lecturas
     * const { count } = await prisma.lecturas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LecturasDeleteManyArgs>(args?: SelectSubset<T, LecturasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lecturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lecturas
     * const lecturas = await prisma.lecturas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LecturasUpdateManyArgs>(args: SelectSubset<T, LecturasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lecturas and returns the data updated in the database.
     * @param {LecturasUpdateManyAndReturnArgs} args - Arguments to update many Lecturas.
     * @example
     * // Update many Lecturas
     * const lecturas = await prisma.lecturas.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lecturas and only return the `id`
     * const lecturasWithIdOnly = await prisma.lecturas.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LecturasUpdateManyAndReturnArgs>(args: SelectSubset<T, LecturasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lecturas.
     * @param {LecturasUpsertArgs} args - Arguments to update or create a Lecturas.
     * @example
     * // Update or create a Lecturas
     * const lecturas = await prisma.lecturas.upsert({
     *   create: {
     *     // ... data to create a Lecturas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lecturas we want to update
     *   }
     * })
     */
    upsert<T extends LecturasUpsertArgs>(args: SelectSubset<T, LecturasUpsertArgs<ExtArgs>>): Prisma__LecturasClient<$Result.GetResult<Prisma.$LecturasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lecturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturasCountArgs} args - Arguments to filter Lecturas to count.
     * @example
     * // Count the number of Lecturas
     * const count = await prisma.lecturas.count({
     *   where: {
     *     // ... the filter for the Lecturas we want to count
     *   }
     * })
    **/
    count<T extends LecturasCountArgs>(
      args?: Subset<T, LecturasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LecturasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lecturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LecturasAggregateArgs>(args: Subset<T, LecturasAggregateArgs>): Prisma.PrismaPromise<GetLecturasAggregateType<T>>

    /**
     * Group by Lecturas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LecturasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LecturasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LecturasGroupByArgs['orderBy'] }
        : { orderBy?: LecturasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LecturasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLecturasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lecturas model
   */
  readonly fields: LecturasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lecturas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LecturasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sensor<T extends SensoresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SensoresDefaultArgs<ExtArgs>>): Prisma__SensoresClient<$Result.GetResult<Prisma.$SensoresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lecturas model
   */ 
  interface LecturasFieldRefs {
    readonly id: FieldRef<"Lecturas", 'BigInt'>
    readonly cr_sensor_id: FieldRef<"Lecturas", 'BigInt'>
    readonly cr_fecha: FieldRef<"Lecturas", 'DateTime'>
    readonly cr_distancia: FieldRef<"Lecturas", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Lecturas findUnique
   */
  export type LecturasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasInclude<ExtArgs> | null
    /**
     * Filter, which Lecturas to fetch.
     */
    where: LecturasWhereUniqueInput
  }

  /**
   * Lecturas findUniqueOrThrow
   */
  export type LecturasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasInclude<ExtArgs> | null
    /**
     * Filter, which Lecturas to fetch.
     */
    where: LecturasWhereUniqueInput
  }

  /**
   * Lecturas findFirst
   */
  export type LecturasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasInclude<ExtArgs> | null
    /**
     * Filter, which Lecturas to fetch.
     */
    where?: LecturasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lecturas to fetch.
     */
    orderBy?: LecturasOrderByWithRelationInput | LecturasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lecturas.
     */
    cursor?: LecturasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lecturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lecturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lecturas.
     */
    distinct?: LecturasScalarFieldEnum | LecturasScalarFieldEnum[]
  }

  /**
   * Lecturas findFirstOrThrow
   */
  export type LecturasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasInclude<ExtArgs> | null
    /**
     * Filter, which Lecturas to fetch.
     */
    where?: LecturasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lecturas to fetch.
     */
    orderBy?: LecturasOrderByWithRelationInput | LecturasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lecturas.
     */
    cursor?: LecturasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lecturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lecturas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lecturas.
     */
    distinct?: LecturasScalarFieldEnum | LecturasScalarFieldEnum[]
  }

  /**
   * Lecturas findMany
   */
  export type LecturasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasInclude<ExtArgs> | null
    /**
     * Filter, which Lecturas to fetch.
     */
    where?: LecturasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lecturas to fetch.
     */
    orderBy?: LecturasOrderByWithRelationInput | LecturasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lecturas.
     */
    cursor?: LecturasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lecturas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lecturas.
     */
    skip?: number
    distinct?: LecturasScalarFieldEnum | LecturasScalarFieldEnum[]
  }

  /**
   * Lecturas create
   */
  export type LecturasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasInclude<ExtArgs> | null
    /**
     * The data needed to create a Lecturas.
     */
    data: XOR<LecturasCreateInput, LecturasUncheckedCreateInput>
  }

  /**
   * Lecturas createMany
   */
  export type LecturasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lecturas.
     */
    data: LecturasCreateManyInput | LecturasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lecturas createManyAndReturn
   */
  export type LecturasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * The data used to create many Lecturas.
     */
    data: LecturasCreateManyInput | LecturasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lecturas update
   */
  export type LecturasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasInclude<ExtArgs> | null
    /**
     * The data needed to update a Lecturas.
     */
    data: XOR<LecturasUpdateInput, LecturasUncheckedUpdateInput>
    /**
     * Choose, which Lecturas to update.
     */
    where: LecturasWhereUniqueInput
  }

  /**
   * Lecturas updateMany
   */
  export type LecturasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lecturas.
     */
    data: XOR<LecturasUpdateManyMutationInput, LecturasUncheckedUpdateManyInput>
    /**
     * Filter which Lecturas to update
     */
    where?: LecturasWhereInput
    /**
     * Limit how many Lecturas to update.
     */
    limit?: number
  }

  /**
   * Lecturas updateManyAndReturn
   */
  export type LecturasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * The data used to update Lecturas.
     */
    data: XOR<LecturasUpdateManyMutationInput, LecturasUncheckedUpdateManyInput>
    /**
     * Filter which Lecturas to update
     */
    where?: LecturasWhereInput
    /**
     * Limit how many Lecturas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lecturas upsert
   */
  export type LecturasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasInclude<ExtArgs> | null
    /**
     * The filter to search for the Lecturas to update in case it exists.
     */
    where: LecturasWhereUniqueInput
    /**
     * In case the Lecturas found by the `where` argument doesn't exist, create a new Lecturas with this data.
     */
    create: XOR<LecturasCreateInput, LecturasUncheckedCreateInput>
    /**
     * In case the Lecturas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LecturasUpdateInput, LecturasUncheckedUpdateInput>
  }

  /**
   * Lecturas delete
   */
  export type LecturasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasInclude<ExtArgs> | null
    /**
     * Filter which Lecturas to delete.
     */
    where: LecturasWhereUniqueInput
  }

  /**
   * Lecturas deleteMany
   */
  export type LecturasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lecturas to delete
     */
    where?: LecturasWhereInput
    /**
     * Limit how many Lecturas to delete.
     */
    limit?: number
  }

  /**
   * Lecturas without action
   */
  export type LecturasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lecturas
     */
    select?: LecturasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lecturas
     */
    omit?: LecturasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LecturasInclude<ExtArgs> | null
  }


  /**
   * Model Tareas
   */

  export type AggregateTareas = {
    _count: TareasCountAggregateOutputType | null
    _avg: TareasAvgAggregateOutputType | null
    _sum: TareasSumAggregateOutputType | null
    _min: TareasMinAggregateOutputType | null
    _max: TareasMaxAggregateOutputType | null
  }

  export type TareasAvgAggregateOutputType = {
    id: number | null
    cr_ruta_id: number | null
    cr_contenedor_id: number | null
    cr_conductor_id: number | null
  }

  export type TareasSumAggregateOutputType = {
    id: bigint | null
    cr_ruta_id: bigint | null
    cr_contenedor_id: bigint | null
    cr_conductor_id: bigint | null
  }

  export type TareasMinAggregateOutputType = {
    id: bigint | null
    cr_ruta_id: bigint | null
    cr_contenedor_id: bigint | null
    cr_conductor_id: bigint | null
    cr_estado: boolean | null
  }

  export type TareasMaxAggregateOutputType = {
    id: bigint | null
    cr_ruta_id: bigint | null
    cr_contenedor_id: bigint | null
    cr_conductor_id: bigint | null
    cr_estado: boolean | null
  }

  export type TareasCountAggregateOutputType = {
    id: number
    cr_ruta_id: number
    cr_contenedor_id: number
    cr_conductor_id: number
    cr_estado: number
    _all: number
  }


  export type TareasAvgAggregateInputType = {
    id?: true
    cr_ruta_id?: true
    cr_contenedor_id?: true
    cr_conductor_id?: true
  }

  export type TareasSumAggregateInputType = {
    id?: true
    cr_ruta_id?: true
    cr_contenedor_id?: true
    cr_conductor_id?: true
  }

  export type TareasMinAggregateInputType = {
    id?: true
    cr_ruta_id?: true
    cr_contenedor_id?: true
    cr_conductor_id?: true
    cr_estado?: true
  }

  export type TareasMaxAggregateInputType = {
    id?: true
    cr_ruta_id?: true
    cr_contenedor_id?: true
    cr_conductor_id?: true
    cr_estado?: true
  }

  export type TareasCountAggregateInputType = {
    id?: true
    cr_ruta_id?: true
    cr_contenedor_id?: true
    cr_conductor_id?: true
    cr_estado?: true
    _all?: true
  }

  export type TareasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tareas to aggregate.
     */
    where?: TareasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tareas to fetch.
     */
    orderBy?: TareasOrderByWithRelationInput | TareasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TareasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tareas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tareas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tareas
    **/
    _count?: true | TareasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TareasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TareasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TareasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TareasMaxAggregateInputType
  }

  export type GetTareasAggregateType<T extends TareasAggregateArgs> = {
        [P in keyof T & keyof AggregateTareas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTareas[P]>
      : GetScalarType<T[P], AggregateTareas[P]>
  }




  export type TareasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TareasWhereInput
    orderBy?: TareasOrderByWithAggregationInput | TareasOrderByWithAggregationInput[]
    by: TareasScalarFieldEnum[] | TareasScalarFieldEnum
    having?: TareasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TareasCountAggregateInputType | true
    _avg?: TareasAvgAggregateInputType
    _sum?: TareasSumAggregateInputType
    _min?: TareasMinAggregateInputType
    _max?: TareasMaxAggregateInputType
  }

  export type TareasGroupByOutputType = {
    id: bigint
    cr_ruta_id: bigint
    cr_contenedor_id: bigint
    cr_conductor_id: bigint | null
    cr_estado: boolean
    _count: TareasCountAggregateOutputType | null
    _avg: TareasAvgAggregateOutputType | null
    _sum: TareasSumAggregateOutputType | null
    _min: TareasMinAggregateOutputType | null
    _max: TareasMaxAggregateOutputType | null
  }

  type GetTareasGroupByPayload<T extends TareasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TareasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TareasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TareasGroupByOutputType[P]>
            : GetScalarType<T[P], TareasGroupByOutputType[P]>
        }
      >
    >


  export type TareasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_ruta_id?: boolean
    cr_contenedor_id?: boolean
    cr_conductor_id?: boolean
    cr_estado?: boolean
    ruta?: boolean | RutasDefaultArgs<ExtArgs>
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
    conductor?: boolean | Tareas$conductorArgs<ExtArgs>
  }, ExtArgs["result"]["tareas"]>

  export type TareasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_ruta_id?: boolean
    cr_contenedor_id?: boolean
    cr_conductor_id?: boolean
    cr_estado?: boolean
    ruta?: boolean | RutasDefaultArgs<ExtArgs>
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
    conductor?: boolean | Tareas$conductorArgs<ExtArgs>
  }, ExtArgs["result"]["tareas"]>

  export type TareasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cr_ruta_id?: boolean
    cr_contenedor_id?: boolean
    cr_conductor_id?: boolean
    cr_estado?: boolean
    ruta?: boolean | RutasDefaultArgs<ExtArgs>
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
    conductor?: boolean | Tareas$conductorArgs<ExtArgs>
  }, ExtArgs["result"]["tareas"]>

  export type TareasSelectScalar = {
    id?: boolean
    cr_ruta_id?: boolean
    cr_contenedor_id?: boolean
    cr_conductor_id?: boolean
    cr_estado?: boolean
  }

  export type TareasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cr_ruta_id" | "cr_contenedor_id" | "cr_conductor_id" | "cr_estado", ExtArgs["result"]["tareas"]>
  export type TareasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ruta?: boolean | RutasDefaultArgs<ExtArgs>
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
    conductor?: boolean | Tareas$conductorArgs<ExtArgs>
  }
  export type TareasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ruta?: boolean | RutasDefaultArgs<ExtArgs>
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
    conductor?: boolean | Tareas$conductorArgs<ExtArgs>
  }
  export type TareasIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ruta?: boolean | RutasDefaultArgs<ExtArgs>
    contenedor?: boolean | ContenedoresDefaultArgs<ExtArgs>
    conductor?: boolean | Tareas$conductorArgs<ExtArgs>
  }

  export type $TareasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tareas"
    objects: {
      ruta: Prisma.$RutasPayload<ExtArgs>
      contenedor: Prisma.$ContenedoresPayload<ExtArgs>
      conductor: Prisma.$ConductoresPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      cr_ruta_id: bigint
      cr_contenedor_id: bigint
      cr_conductor_id: bigint | null
      cr_estado: boolean
    }, ExtArgs["result"]["tareas"]>
    composites: {}
  }

  type TareasGetPayload<S extends boolean | null | undefined | TareasDefaultArgs> = $Result.GetResult<Prisma.$TareasPayload, S>

  type TareasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TareasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TareasCountAggregateInputType | true
    }

  export interface TareasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tareas'], meta: { name: 'Tareas' } }
    /**
     * Find zero or one Tareas that matches the filter.
     * @param {TareasFindUniqueArgs} args - Arguments to find a Tareas
     * @example
     * // Get one Tareas
     * const tareas = await prisma.tareas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TareasFindUniqueArgs>(args: SelectSubset<T, TareasFindUniqueArgs<ExtArgs>>): Prisma__TareasClient<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tareas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TareasFindUniqueOrThrowArgs} args - Arguments to find a Tareas
     * @example
     * // Get one Tareas
     * const tareas = await prisma.tareas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TareasFindUniqueOrThrowArgs>(args: SelectSubset<T, TareasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TareasClient<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tareas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TareasFindFirstArgs} args - Arguments to find a Tareas
     * @example
     * // Get one Tareas
     * const tareas = await prisma.tareas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TareasFindFirstArgs>(args?: SelectSubset<T, TareasFindFirstArgs<ExtArgs>>): Prisma__TareasClient<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tareas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TareasFindFirstOrThrowArgs} args - Arguments to find a Tareas
     * @example
     * // Get one Tareas
     * const tareas = await prisma.tareas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TareasFindFirstOrThrowArgs>(args?: SelectSubset<T, TareasFindFirstOrThrowArgs<ExtArgs>>): Prisma__TareasClient<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tareas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TareasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tareas
     * const tareas = await prisma.tareas.findMany()
     * 
     * // Get first 10 Tareas
     * const tareas = await prisma.tareas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tareasWithIdOnly = await prisma.tareas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TareasFindManyArgs>(args?: SelectSubset<T, TareasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tareas.
     * @param {TareasCreateArgs} args - Arguments to create a Tareas.
     * @example
     * // Create one Tareas
     * const Tareas = await prisma.tareas.create({
     *   data: {
     *     // ... data to create a Tareas
     *   }
     * })
     * 
     */
    create<T extends TareasCreateArgs>(args: SelectSubset<T, TareasCreateArgs<ExtArgs>>): Prisma__TareasClient<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tareas.
     * @param {TareasCreateManyArgs} args - Arguments to create many Tareas.
     * @example
     * // Create many Tareas
     * const tareas = await prisma.tareas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TareasCreateManyArgs>(args?: SelectSubset<T, TareasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tareas and returns the data saved in the database.
     * @param {TareasCreateManyAndReturnArgs} args - Arguments to create many Tareas.
     * @example
     * // Create many Tareas
     * const tareas = await prisma.tareas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tareas and only return the `id`
     * const tareasWithIdOnly = await prisma.tareas.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TareasCreateManyAndReturnArgs>(args?: SelectSubset<T, TareasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tareas.
     * @param {TareasDeleteArgs} args - Arguments to delete one Tareas.
     * @example
     * // Delete one Tareas
     * const Tareas = await prisma.tareas.delete({
     *   where: {
     *     // ... filter to delete one Tareas
     *   }
     * })
     * 
     */
    delete<T extends TareasDeleteArgs>(args: SelectSubset<T, TareasDeleteArgs<ExtArgs>>): Prisma__TareasClient<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tareas.
     * @param {TareasUpdateArgs} args - Arguments to update one Tareas.
     * @example
     * // Update one Tareas
     * const tareas = await prisma.tareas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TareasUpdateArgs>(args: SelectSubset<T, TareasUpdateArgs<ExtArgs>>): Prisma__TareasClient<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tareas.
     * @param {TareasDeleteManyArgs} args - Arguments to filter Tareas to delete.
     * @example
     * // Delete a few Tareas
     * const { count } = await prisma.tareas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TareasDeleteManyArgs>(args?: SelectSubset<T, TareasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tareas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TareasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tareas
     * const tareas = await prisma.tareas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TareasUpdateManyArgs>(args: SelectSubset<T, TareasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tareas and returns the data updated in the database.
     * @param {TareasUpdateManyAndReturnArgs} args - Arguments to update many Tareas.
     * @example
     * // Update many Tareas
     * const tareas = await prisma.tareas.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tareas and only return the `id`
     * const tareasWithIdOnly = await prisma.tareas.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TareasUpdateManyAndReturnArgs>(args: SelectSubset<T, TareasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tareas.
     * @param {TareasUpsertArgs} args - Arguments to update or create a Tareas.
     * @example
     * // Update or create a Tareas
     * const tareas = await prisma.tareas.upsert({
     *   create: {
     *     // ... data to create a Tareas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tareas we want to update
     *   }
     * })
     */
    upsert<T extends TareasUpsertArgs>(args: SelectSubset<T, TareasUpsertArgs<ExtArgs>>): Prisma__TareasClient<$Result.GetResult<Prisma.$TareasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tareas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TareasCountArgs} args - Arguments to filter Tareas to count.
     * @example
     * // Count the number of Tareas
     * const count = await prisma.tareas.count({
     *   where: {
     *     // ... the filter for the Tareas we want to count
     *   }
     * })
    **/
    count<T extends TareasCountArgs>(
      args?: Subset<T, TareasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TareasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tareas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TareasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TareasAggregateArgs>(args: Subset<T, TareasAggregateArgs>): Prisma.PrismaPromise<GetTareasAggregateType<T>>

    /**
     * Group by Tareas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TareasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TareasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TareasGroupByArgs['orderBy'] }
        : { orderBy?: TareasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TareasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTareasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tareas model
   */
  readonly fields: TareasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tareas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TareasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ruta<T extends RutasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RutasDefaultArgs<ExtArgs>>): Prisma__RutasClient<$Result.GetResult<Prisma.$RutasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contenedor<T extends ContenedoresDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContenedoresDefaultArgs<ExtArgs>>): Prisma__ContenedoresClient<$Result.GetResult<Prisma.$ContenedoresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    conductor<T extends Tareas$conductorArgs<ExtArgs> = {}>(args?: Subset<T, Tareas$conductorArgs<ExtArgs>>): Prisma__ConductoresClient<$Result.GetResult<Prisma.$ConductoresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tareas model
   */ 
  interface TareasFieldRefs {
    readonly id: FieldRef<"Tareas", 'BigInt'>
    readonly cr_ruta_id: FieldRef<"Tareas", 'BigInt'>
    readonly cr_contenedor_id: FieldRef<"Tareas", 'BigInt'>
    readonly cr_conductor_id: FieldRef<"Tareas", 'BigInt'>
    readonly cr_estado: FieldRef<"Tareas", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Tareas findUnique
   */
  export type TareasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    /**
     * Filter, which Tareas to fetch.
     */
    where: TareasWhereUniqueInput
  }

  /**
   * Tareas findUniqueOrThrow
   */
  export type TareasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    /**
     * Filter, which Tareas to fetch.
     */
    where: TareasWhereUniqueInput
  }

  /**
   * Tareas findFirst
   */
  export type TareasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    /**
     * Filter, which Tareas to fetch.
     */
    where?: TareasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tareas to fetch.
     */
    orderBy?: TareasOrderByWithRelationInput | TareasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tareas.
     */
    cursor?: TareasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tareas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tareas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tareas.
     */
    distinct?: TareasScalarFieldEnum | TareasScalarFieldEnum[]
  }

  /**
   * Tareas findFirstOrThrow
   */
  export type TareasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    /**
     * Filter, which Tareas to fetch.
     */
    where?: TareasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tareas to fetch.
     */
    orderBy?: TareasOrderByWithRelationInput | TareasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tareas.
     */
    cursor?: TareasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tareas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tareas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tareas.
     */
    distinct?: TareasScalarFieldEnum | TareasScalarFieldEnum[]
  }

  /**
   * Tareas findMany
   */
  export type TareasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    /**
     * Filter, which Tareas to fetch.
     */
    where?: TareasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tareas to fetch.
     */
    orderBy?: TareasOrderByWithRelationInput | TareasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tareas.
     */
    cursor?: TareasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tareas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tareas.
     */
    skip?: number
    distinct?: TareasScalarFieldEnum | TareasScalarFieldEnum[]
  }

  /**
   * Tareas create
   */
  export type TareasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    /**
     * The data needed to create a Tareas.
     */
    data: XOR<TareasCreateInput, TareasUncheckedCreateInput>
  }

  /**
   * Tareas createMany
   */
  export type TareasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tareas.
     */
    data: TareasCreateManyInput | TareasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tareas createManyAndReturn
   */
  export type TareasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * The data used to create many Tareas.
     */
    data: TareasCreateManyInput | TareasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tareas update
   */
  export type TareasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    /**
     * The data needed to update a Tareas.
     */
    data: XOR<TareasUpdateInput, TareasUncheckedUpdateInput>
    /**
     * Choose, which Tareas to update.
     */
    where: TareasWhereUniqueInput
  }

  /**
   * Tareas updateMany
   */
  export type TareasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tareas.
     */
    data: XOR<TareasUpdateManyMutationInput, TareasUncheckedUpdateManyInput>
    /**
     * Filter which Tareas to update
     */
    where?: TareasWhereInput
    /**
     * Limit how many Tareas to update.
     */
    limit?: number
  }

  /**
   * Tareas updateManyAndReturn
   */
  export type TareasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * The data used to update Tareas.
     */
    data: XOR<TareasUpdateManyMutationInput, TareasUncheckedUpdateManyInput>
    /**
     * Filter which Tareas to update
     */
    where?: TareasWhereInput
    /**
     * Limit how many Tareas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tareas upsert
   */
  export type TareasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    /**
     * The filter to search for the Tareas to update in case it exists.
     */
    where: TareasWhereUniqueInput
    /**
     * In case the Tareas found by the `where` argument doesn't exist, create a new Tareas with this data.
     */
    create: XOR<TareasCreateInput, TareasUncheckedCreateInput>
    /**
     * In case the Tareas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TareasUpdateInput, TareasUncheckedUpdateInput>
  }

  /**
   * Tareas delete
   */
  export type TareasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
    /**
     * Filter which Tareas to delete.
     */
    where: TareasWhereUniqueInput
  }

  /**
   * Tareas deleteMany
   */
  export type TareasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tareas to delete
     */
    where?: TareasWhereInput
    /**
     * Limit how many Tareas to delete.
     */
    limit?: number
  }

  /**
   * Tareas.conductor
   */
  export type Tareas$conductorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conductores
     */
    select?: ConductoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conductores
     */
    omit?: ConductoresOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConductoresInclude<ExtArgs> | null
    where?: ConductoresWhereInput
  }

  /**
   * Tareas without action
   */
  export type TareasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tareas
     */
    select?: TareasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tareas
     */
    omit?: TareasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TareasInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ConductoresScalarFieldEnum: {
    id: 'id',
    cr_nombre: 'cr_nombre',
    cr_correo: 'cr_correo',
    cr_contrasenia: 'cr_contrasenia'
  };

  export type ConductoresScalarFieldEnum = (typeof ConductoresScalarFieldEnum)[keyof typeof ConductoresScalarFieldEnum]


  export const ContenedoresScalarFieldEnum: {
    id: 'id',
    cr_ubicacion: 'cr_ubicacion',
    cr_codigo_qr: 'cr_codigo_qr',
    cr_nivel_llenado: 'cr_nivel_llenado'
  };

  export type ContenedoresScalarFieldEnum = (typeof ContenedoresScalarFieldEnum)[keyof typeof ContenedoresScalarFieldEnum]


  export const RutasScalarFieldEnum: {
    id: 'id',
    cr_conductor_id: 'cr_conductor_id',
    cr_fecha: 'cr_fecha',
    cr_detalles: 'cr_detalles'
  };

  export type RutasScalarFieldEnum = (typeof RutasScalarFieldEnum)[keyof typeof RutasScalarFieldEnum]


  export const FormulariosScalarFieldEnum: {
    id: 'id',
    cr_contenedor_id: 'cr_contenedor_id',
    cr_fecha: 'cr_fecha',
    cr_problema: 'cr_problema',
    cr_descripcion: 'cr_descripcion'
  };

  export type FormulariosScalarFieldEnum = (typeof FormulariosScalarFieldEnum)[keyof typeof FormulariosScalarFieldEnum]


  export const SensoresScalarFieldEnum: {
    id: 'id',
    cr_contenedor_id: 'cr_contenedor_id'
  };

  export type SensoresScalarFieldEnum = (typeof SensoresScalarFieldEnum)[keyof typeof SensoresScalarFieldEnum]


  export const LecturasScalarFieldEnum: {
    id: 'id',
    cr_sensor_id: 'cr_sensor_id',
    cr_fecha: 'cr_fecha',
    cr_distancia: 'cr_distancia'
  };

  export type LecturasScalarFieldEnum = (typeof LecturasScalarFieldEnum)[keyof typeof LecturasScalarFieldEnum]


  export const TareasScalarFieldEnum: {
    id: 'id',
    cr_ruta_id: 'cr_ruta_id',
    cr_contenedor_id: 'cr_contenedor_id',
    cr_conductor_id: 'cr_conductor_id',
    cr_estado: 'cr_estado'
  };

  export type TareasScalarFieldEnum = (typeof TareasScalarFieldEnum)[keyof typeof TareasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ConductoresWhereInput = {
    AND?: ConductoresWhereInput | ConductoresWhereInput[]
    OR?: ConductoresWhereInput[]
    NOT?: ConductoresWhereInput | ConductoresWhereInput[]
    id?: BigIntFilter<"Conductores"> | bigint | number
    cr_nombre?: StringFilter<"Conductores"> | string
    cr_correo?: StringFilter<"Conductores"> | string
    cr_contrasenia?: StringFilter<"Conductores"> | string
    rutas?: RutasListRelationFilter
    tareas?: TareasListRelationFilter
  }

  export type ConductoresOrderByWithRelationInput = {
    id?: SortOrder
    cr_nombre?: SortOrder
    cr_correo?: SortOrder
    cr_contrasenia?: SortOrder
    rutas?: RutasOrderByRelationAggregateInput
    tareas?: TareasOrderByRelationAggregateInput
  }

  export type ConductoresWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ConductoresWhereInput | ConductoresWhereInput[]
    OR?: ConductoresWhereInput[]
    NOT?: ConductoresWhereInput | ConductoresWhereInput[]
    cr_nombre?: StringFilter<"Conductores"> | string
    cr_correo?: StringFilter<"Conductores"> | string
    cr_contrasenia?: StringFilter<"Conductores"> | string
    rutas?: RutasListRelationFilter
    tareas?: TareasListRelationFilter
  }, "id">

  export type ConductoresOrderByWithAggregationInput = {
    id?: SortOrder
    cr_nombre?: SortOrder
    cr_correo?: SortOrder
    cr_contrasenia?: SortOrder
    _count?: ConductoresCountOrderByAggregateInput
    _avg?: ConductoresAvgOrderByAggregateInput
    _max?: ConductoresMaxOrderByAggregateInput
    _min?: ConductoresMinOrderByAggregateInput
    _sum?: ConductoresSumOrderByAggregateInput
  }

  export type ConductoresScalarWhereWithAggregatesInput = {
    AND?: ConductoresScalarWhereWithAggregatesInput | ConductoresScalarWhereWithAggregatesInput[]
    OR?: ConductoresScalarWhereWithAggregatesInput[]
    NOT?: ConductoresScalarWhereWithAggregatesInput | ConductoresScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Conductores"> | bigint | number
    cr_nombre?: StringWithAggregatesFilter<"Conductores"> | string
    cr_correo?: StringWithAggregatesFilter<"Conductores"> | string
    cr_contrasenia?: StringWithAggregatesFilter<"Conductores"> | string
  }

  export type ContenedoresWhereInput = {
    AND?: ContenedoresWhereInput | ContenedoresWhereInput[]
    OR?: ContenedoresWhereInput[]
    NOT?: ContenedoresWhereInput | ContenedoresWhereInput[]
    id?: BigIntFilter<"Contenedores"> | bigint | number
    cr_ubicacion?: StringFilter<"Contenedores"> | string
    cr_codigo_qr?: StringFilter<"Contenedores"> | string
    cr_nivel_llenado?: IntFilter<"Contenedores"> | number
    sensores?: SensoresListRelationFilter
    formularios?: FormulariosListRelationFilter
    tareas?: TareasListRelationFilter
  }

  export type ContenedoresOrderByWithRelationInput = {
    id?: SortOrder
    cr_ubicacion?: SortOrder
    cr_codigo_qr?: SortOrder
    cr_nivel_llenado?: SortOrder
    sensores?: SensoresOrderByRelationAggregateInput
    formularios?: FormulariosOrderByRelationAggregateInput
    tareas?: TareasOrderByRelationAggregateInput
  }

  export type ContenedoresWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ContenedoresWhereInput | ContenedoresWhereInput[]
    OR?: ContenedoresWhereInput[]
    NOT?: ContenedoresWhereInput | ContenedoresWhereInput[]
    cr_ubicacion?: StringFilter<"Contenedores"> | string
    cr_codigo_qr?: StringFilter<"Contenedores"> | string
    cr_nivel_llenado?: IntFilter<"Contenedores"> | number
    sensores?: SensoresListRelationFilter
    formularios?: FormulariosListRelationFilter
    tareas?: TareasListRelationFilter
  }, "id">

  export type ContenedoresOrderByWithAggregationInput = {
    id?: SortOrder
    cr_ubicacion?: SortOrder
    cr_codigo_qr?: SortOrder
    cr_nivel_llenado?: SortOrder
    _count?: ContenedoresCountOrderByAggregateInput
    _avg?: ContenedoresAvgOrderByAggregateInput
    _max?: ContenedoresMaxOrderByAggregateInput
    _min?: ContenedoresMinOrderByAggregateInput
    _sum?: ContenedoresSumOrderByAggregateInput
  }

  export type ContenedoresScalarWhereWithAggregatesInput = {
    AND?: ContenedoresScalarWhereWithAggregatesInput | ContenedoresScalarWhereWithAggregatesInput[]
    OR?: ContenedoresScalarWhereWithAggregatesInput[]
    NOT?: ContenedoresScalarWhereWithAggregatesInput | ContenedoresScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Contenedores"> | bigint | number
    cr_ubicacion?: StringWithAggregatesFilter<"Contenedores"> | string
    cr_codigo_qr?: StringWithAggregatesFilter<"Contenedores"> | string
    cr_nivel_llenado?: IntWithAggregatesFilter<"Contenedores"> | number
  }

  export type RutasWhereInput = {
    AND?: RutasWhereInput | RutasWhereInput[]
    OR?: RutasWhereInput[]
    NOT?: RutasWhereInput | RutasWhereInput[]
    id?: BigIntFilter<"Rutas"> | bigint | number
    cr_conductor_id?: BigIntFilter<"Rutas"> | bigint | number
    cr_fecha?: DateTimeFilter<"Rutas"> | Date | string
    cr_detalles?: StringNullableFilter<"Rutas"> | string | null
    conductor?: XOR<ConductoresScalarRelationFilter, ConductoresWhereInput>
    tareas?: TareasListRelationFilter
  }

  export type RutasOrderByWithRelationInput = {
    id?: SortOrder
    cr_conductor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_detalles?: SortOrderInput | SortOrder
    conductor?: ConductoresOrderByWithRelationInput
    tareas?: TareasOrderByRelationAggregateInput
  }

  export type RutasWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: RutasWhereInput | RutasWhereInput[]
    OR?: RutasWhereInput[]
    NOT?: RutasWhereInput | RutasWhereInput[]
    cr_conductor_id?: BigIntFilter<"Rutas"> | bigint | number
    cr_fecha?: DateTimeFilter<"Rutas"> | Date | string
    cr_detalles?: StringNullableFilter<"Rutas"> | string | null
    conductor?: XOR<ConductoresScalarRelationFilter, ConductoresWhereInput>
    tareas?: TareasListRelationFilter
  }, "id">

  export type RutasOrderByWithAggregationInput = {
    id?: SortOrder
    cr_conductor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_detalles?: SortOrderInput | SortOrder
    _count?: RutasCountOrderByAggregateInput
    _avg?: RutasAvgOrderByAggregateInput
    _max?: RutasMaxOrderByAggregateInput
    _min?: RutasMinOrderByAggregateInput
    _sum?: RutasSumOrderByAggregateInput
  }

  export type RutasScalarWhereWithAggregatesInput = {
    AND?: RutasScalarWhereWithAggregatesInput | RutasScalarWhereWithAggregatesInput[]
    OR?: RutasScalarWhereWithAggregatesInput[]
    NOT?: RutasScalarWhereWithAggregatesInput | RutasScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Rutas"> | bigint | number
    cr_conductor_id?: BigIntWithAggregatesFilter<"Rutas"> | bigint | number
    cr_fecha?: DateTimeWithAggregatesFilter<"Rutas"> | Date | string
    cr_detalles?: StringNullableWithAggregatesFilter<"Rutas"> | string | null
  }

  export type FormulariosWhereInput = {
    AND?: FormulariosWhereInput | FormulariosWhereInput[]
    OR?: FormulariosWhereInput[]
    NOT?: FormulariosWhereInput | FormulariosWhereInput[]
    id?: BigIntFilter<"Formularios"> | bigint | number
    cr_contenedor_id?: BigIntFilter<"Formularios"> | bigint | number
    cr_fecha?: DateTimeFilter<"Formularios"> | Date | string
    cr_problema?: StringNullableFilter<"Formularios"> | string | null
    cr_descripcion?: StringNullableFilter<"Formularios"> | string | null
    contenedor?: XOR<ContenedoresScalarRelationFilter, ContenedoresWhereInput>
  }

  export type FormulariosOrderByWithRelationInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_problema?: SortOrderInput | SortOrder
    cr_descripcion?: SortOrderInput | SortOrder
    contenedor?: ContenedoresOrderByWithRelationInput
  }

  export type FormulariosWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: FormulariosWhereInput | FormulariosWhereInput[]
    OR?: FormulariosWhereInput[]
    NOT?: FormulariosWhereInput | FormulariosWhereInput[]
    cr_contenedor_id?: BigIntFilter<"Formularios"> | bigint | number
    cr_fecha?: DateTimeFilter<"Formularios"> | Date | string
    cr_problema?: StringNullableFilter<"Formularios"> | string | null
    cr_descripcion?: StringNullableFilter<"Formularios"> | string | null
    contenedor?: XOR<ContenedoresScalarRelationFilter, ContenedoresWhereInput>
  }, "id">

  export type FormulariosOrderByWithAggregationInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_problema?: SortOrderInput | SortOrder
    cr_descripcion?: SortOrderInput | SortOrder
    _count?: FormulariosCountOrderByAggregateInput
    _avg?: FormulariosAvgOrderByAggregateInput
    _max?: FormulariosMaxOrderByAggregateInput
    _min?: FormulariosMinOrderByAggregateInput
    _sum?: FormulariosSumOrderByAggregateInput
  }

  export type FormulariosScalarWhereWithAggregatesInput = {
    AND?: FormulariosScalarWhereWithAggregatesInput | FormulariosScalarWhereWithAggregatesInput[]
    OR?: FormulariosScalarWhereWithAggregatesInput[]
    NOT?: FormulariosScalarWhereWithAggregatesInput | FormulariosScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Formularios"> | bigint | number
    cr_contenedor_id?: BigIntWithAggregatesFilter<"Formularios"> | bigint | number
    cr_fecha?: DateTimeWithAggregatesFilter<"Formularios"> | Date | string
    cr_problema?: StringNullableWithAggregatesFilter<"Formularios"> | string | null
    cr_descripcion?: StringNullableWithAggregatesFilter<"Formularios"> | string | null
  }

  export type SensoresWhereInput = {
    AND?: SensoresWhereInput | SensoresWhereInput[]
    OR?: SensoresWhereInput[]
    NOT?: SensoresWhereInput | SensoresWhereInput[]
    id?: BigIntFilter<"Sensores"> | bigint | number
    cr_contenedor_id?: BigIntFilter<"Sensores"> | bigint | number
    lecturas?: LecturasListRelationFilter
    contenedor?: XOR<ContenedoresScalarRelationFilter, ContenedoresWhereInput>
  }

  export type SensoresOrderByWithRelationInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
    lecturas?: LecturasOrderByRelationAggregateInput
    contenedor?: ContenedoresOrderByWithRelationInput
  }

  export type SensoresWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: SensoresWhereInput | SensoresWhereInput[]
    OR?: SensoresWhereInput[]
    NOT?: SensoresWhereInput | SensoresWhereInput[]
    cr_contenedor_id?: BigIntFilter<"Sensores"> | bigint | number
    lecturas?: LecturasListRelationFilter
    contenedor?: XOR<ContenedoresScalarRelationFilter, ContenedoresWhereInput>
  }, "id">

  export type SensoresOrderByWithAggregationInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
    _count?: SensoresCountOrderByAggregateInput
    _avg?: SensoresAvgOrderByAggregateInput
    _max?: SensoresMaxOrderByAggregateInput
    _min?: SensoresMinOrderByAggregateInput
    _sum?: SensoresSumOrderByAggregateInput
  }

  export type SensoresScalarWhereWithAggregatesInput = {
    AND?: SensoresScalarWhereWithAggregatesInput | SensoresScalarWhereWithAggregatesInput[]
    OR?: SensoresScalarWhereWithAggregatesInput[]
    NOT?: SensoresScalarWhereWithAggregatesInput | SensoresScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Sensores"> | bigint | number
    cr_contenedor_id?: BigIntWithAggregatesFilter<"Sensores"> | bigint | number
  }

  export type LecturasWhereInput = {
    AND?: LecturasWhereInput | LecturasWhereInput[]
    OR?: LecturasWhereInput[]
    NOT?: LecturasWhereInput | LecturasWhereInput[]
    id?: BigIntFilter<"Lecturas"> | bigint | number
    cr_sensor_id?: BigIntFilter<"Lecturas"> | bigint | number
    cr_fecha?: DateTimeFilter<"Lecturas"> | Date | string
    cr_distancia?: DecimalFilter<"Lecturas"> | Decimal | DecimalJsLike | number | string
    sensor?: XOR<SensoresScalarRelationFilter, SensoresWhereInput>
  }

  export type LecturasOrderByWithRelationInput = {
    id?: SortOrder
    cr_sensor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_distancia?: SortOrder
    sensor?: SensoresOrderByWithRelationInput
  }

  export type LecturasWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: LecturasWhereInput | LecturasWhereInput[]
    OR?: LecturasWhereInput[]
    NOT?: LecturasWhereInput | LecturasWhereInput[]
    cr_sensor_id?: BigIntFilter<"Lecturas"> | bigint | number
    cr_fecha?: DateTimeFilter<"Lecturas"> | Date | string
    cr_distancia?: DecimalFilter<"Lecturas"> | Decimal | DecimalJsLike | number | string
    sensor?: XOR<SensoresScalarRelationFilter, SensoresWhereInput>
  }, "id">

  export type LecturasOrderByWithAggregationInput = {
    id?: SortOrder
    cr_sensor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_distancia?: SortOrder
    _count?: LecturasCountOrderByAggregateInput
    _avg?: LecturasAvgOrderByAggregateInput
    _max?: LecturasMaxOrderByAggregateInput
    _min?: LecturasMinOrderByAggregateInput
    _sum?: LecturasSumOrderByAggregateInput
  }

  export type LecturasScalarWhereWithAggregatesInput = {
    AND?: LecturasScalarWhereWithAggregatesInput | LecturasScalarWhereWithAggregatesInput[]
    OR?: LecturasScalarWhereWithAggregatesInput[]
    NOT?: LecturasScalarWhereWithAggregatesInput | LecturasScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Lecturas"> | bigint | number
    cr_sensor_id?: BigIntWithAggregatesFilter<"Lecturas"> | bigint | number
    cr_fecha?: DateTimeWithAggregatesFilter<"Lecturas"> | Date | string
    cr_distancia?: DecimalWithAggregatesFilter<"Lecturas"> | Decimal | DecimalJsLike | number | string
  }

  export type TareasWhereInput = {
    AND?: TareasWhereInput | TareasWhereInput[]
    OR?: TareasWhereInput[]
    NOT?: TareasWhereInput | TareasWhereInput[]
    id?: BigIntFilter<"Tareas"> | bigint | number
    cr_ruta_id?: BigIntFilter<"Tareas"> | bigint | number
    cr_contenedor_id?: BigIntFilter<"Tareas"> | bigint | number
    cr_conductor_id?: BigIntNullableFilter<"Tareas"> | bigint | number | null
    cr_estado?: BoolFilter<"Tareas"> | boolean
    ruta?: XOR<RutasScalarRelationFilter, RutasWhereInput>
    contenedor?: XOR<ContenedoresScalarRelationFilter, ContenedoresWhereInput>
    conductor?: XOR<ConductoresNullableScalarRelationFilter, ConductoresWhereInput> | null
  }

  export type TareasOrderByWithRelationInput = {
    id?: SortOrder
    cr_ruta_id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_conductor_id?: SortOrderInput | SortOrder
    cr_estado?: SortOrder
    ruta?: RutasOrderByWithRelationInput
    contenedor?: ContenedoresOrderByWithRelationInput
    conductor?: ConductoresOrderByWithRelationInput
  }

  export type TareasWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: TareasWhereInput | TareasWhereInput[]
    OR?: TareasWhereInput[]
    NOT?: TareasWhereInput | TareasWhereInput[]
    cr_ruta_id?: BigIntFilter<"Tareas"> | bigint | number
    cr_contenedor_id?: BigIntFilter<"Tareas"> | bigint | number
    cr_conductor_id?: BigIntNullableFilter<"Tareas"> | bigint | number | null
    cr_estado?: BoolFilter<"Tareas"> | boolean
    ruta?: XOR<RutasScalarRelationFilter, RutasWhereInput>
    contenedor?: XOR<ContenedoresScalarRelationFilter, ContenedoresWhereInput>
    conductor?: XOR<ConductoresNullableScalarRelationFilter, ConductoresWhereInput> | null
  }, "id">

  export type TareasOrderByWithAggregationInput = {
    id?: SortOrder
    cr_ruta_id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_conductor_id?: SortOrderInput | SortOrder
    cr_estado?: SortOrder
    _count?: TareasCountOrderByAggregateInput
    _avg?: TareasAvgOrderByAggregateInput
    _max?: TareasMaxOrderByAggregateInput
    _min?: TareasMinOrderByAggregateInput
    _sum?: TareasSumOrderByAggregateInput
  }

  export type TareasScalarWhereWithAggregatesInput = {
    AND?: TareasScalarWhereWithAggregatesInput | TareasScalarWhereWithAggregatesInput[]
    OR?: TareasScalarWhereWithAggregatesInput[]
    NOT?: TareasScalarWhereWithAggregatesInput | TareasScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Tareas"> | bigint | number
    cr_ruta_id?: BigIntWithAggregatesFilter<"Tareas"> | bigint | number
    cr_contenedor_id?: BigIntWithAggregatesFilter<"Tareas"> | bigint | number
    cr_conductor_id?: BigIntNullableWithAggregatesFilter<"Tareas"> | bigint | number | null
    cr_estado?: BoolWithAggregatesFilter<"Tareas"> | boolean
  }

  export type ConductoresCreateInput = {
    id?: bigint | number
    cr_nombre: string
    cr_correo: string
    cr_contrasenia: string
    rutas?: RutasCreateNestedManyWithoutConductorInput
    tareas?: TareasCreateNestedManyWithoutConductorInput
  }

  export type ConductoresUncheckedCreateInput = {
    id?: bigint | number
    cr_nombre: string
    cr_correo: string
    cr_contrasenia: string
    rutas?: RutasUncheckedCreateNestedManyWithoutConductorInput
    tareas?: TareasUncheckedCreateNestedManyWithoutConductorInput
  }

  export type ConductoresUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_nombre?: StringFieldUpdateOperationsInput | string
    cr_correo?: StringFieldUpdateOperationsInput | string
    cr_contrasenia?: StringFieldUpdateOperationsInput | string
    rutas?: RutasUpdateManyWithoutConductorNestedInput
    tareas?: TareasUpdateManyWithoutConductorNestedInput
  }

  export type ConductoresUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_nombre?: StringFieldUpdateOperationsInput | string
    cr_correo?: StringFieldUpdateOperationsInput | string
    cr_contrasenia?: StringFieldUpdateOperationsInput | string
    rutas?: RutasUncheckedUpdateManyWithoutConductorNestedInput
    tareas?: TareasUncheckedUpdateManyWithoutConductorNestedInput
  }

  export type ConductoresCreateManyInput = {
    id?: bigint | number
    cr_nombre: string
    cr_correo: string
    cr_contrasenia: string
  }

  export type ConductoresUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_nombre?: StringFieldUpdateOperationsInput | string
    cr_correo?: StringFieldUpdateOperationsInput | string
    cr_contrasenia?: StringFieldUpdateOperationsInput | string
  }

  export type ConductoresUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_nombre?: StringFieldUpdateOperationsInput | string
    cr_correo?: StringFieldUpdateOperationsInput | string
    cr_contrasenia?: StringFieldUpdateOperationsInput | string
  }

  export type ContenedoresCreateInput = {
    id?: bigint | number
    cr_ubicacion: string
    cr_codigo_qr: string
    cr_nivel_llenado?: number
    sensores?: SensoresCreateNestedManyWithoutContenedorInput
    formularios?: FormulariosCreateNestedManyWithoutContenedorInput
    tareas?: TareasCreateNestedManyWithoutContenedorInput
  }

  export type ContenedoresUncheckedCreateInput = {
    id?: bigint | number
    cr_ubicacion: string
    cr_codigo_qr: string
    cr_nivel_llenado?: number
    sensores?: SensoresUncheckedCreateNestedManyWithoutContenedorInput
    formularios?: FormulariosUncheckedCreateNestedManyWithoutContenedorInput
    tareas?: TareasUncheckedCreateNestedManyWithoutContenedorInput
  }

  export type ContenedoresUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ubicacion?: StringFieldUpdateOperationsInput | string
    cr_codigo_qr?: StringFieldUpdateOperationsInput | string
    cr_nivel_llenado?: IntFieldUpdateOperationsInput | number
    sensores?: SensoresUpdateManyWithoutContenedorNestedInput
    formularios?: FormulariosUpdateManyWithoutContenedorNestedInput
    tareas?: TareasUpdateManyWithoutContenedorNestedInput
  }

  export type ContenedoresUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ubicacion?: StringFieldUpdateOperationsInput | string
    cr_codigo_qr?: StringFieldUpdateOperationsInput | string
    cr_nivel_llenado?: IntFieldUpdateOperationsInput | number
    sensores?: SensoresUncheckedUpdateManyWithoutContenedorNestedInput
    formularios?: FormulariosUncheckedUpdateManyWithoutContenedorNestedInput
    tareas?: TareasUncheckedUpdateManyWithoutContenedorNestedInput
  }

  export type ContenedoresCreateManyInput = {
    id?: bigint | number
    cr_ubicacion: string
    cr_codigo_qr: string
    cr_nivel_llenado?: number
  }

  export type ContenedoresUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ubicacion?: StringFieldUpdateOperationsInput | string
    cr_codigo_qr?: StringFieldUpdateOperationsInput | string
    cr_nivel_llenado?: IntFieldUpdateOperationsInput | number
  }

  export type ContenedoresUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ubicacion?: StringFieldUpdateOperationsInput | string
    cr_codigo_qr?: StringFieldUpdateOperationsInput | string
    cr_nivel_llenado?: IntFieldUpdateOperationsInput | number
  }

  export type RutasCreateInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_detalles?: string | null
    conductor: ConductoresCreateNestedOneWithoutRutasInput
    tareas?: TareasCreateNestedManyWithoutRutaInput
  }

  export type RutasUncheckedCreateInput = {
    id?: bigint | number
    cr_conductor_id: bigint | number
    cr_fecha: Date | string
    cr_detalles?: string | null
    tareas?: TareasUncheckedCreateNestedManyWithoutRutaInput
  }

  export type RutasUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_detalles?: NullableStringFieldUpdateOperationsInput | string | null
    conductor?: ConductoresUpdateOneRequiredWithoutRutasNestedInput
    tareas?: TareasUpdateManyWithoutRutaNestedInput
  }

  export type RutasUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_conductor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_detalles?: NullableStringFieldUpdateOperationsInput | string | null
    tareas?: TareasUncheckedUpdateManyWithoutRutaNestedInput
  }

  export type RutasCreateManyInput = {
    id?: bigint | number
    cr_conductor_id: bigint | number
    cr_fecha: Date | string
    cr_detalles?: string | null
  }

  export type RutasUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_detalles?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RutasUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_conductor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_detalles?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormulariosCreateInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_problema?: string | null
    cr_descripcion?: string | null
    contenedor: ContenedoresCreateNestedOneWithoutFormulariosInput
  }

  export type FormulariosUncheckedCreateInput = {
    id?: bigint | number
    cr_contenedor_id: bigint | number
    cr_fecha: Date | string
    cr_problema?: string | null
    cr_descripcion?: string | null
  }

  export type FormulariosUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_problema?: NullableStringFieldUpdateOperationsInput | string | null
    cr_descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    contenedor?: ContenedoresUpdateOneRequiredWithoutFormulariosNestedInput
  }

  export type FormulariosUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_contenedor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_problema?: NullableStringFieldUpdateOperationsInput | string | null
    cr_descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormulariosCreateManyInput = {
    id?: bigint | number
    cr_contenedor_id: bigint | number
    cr_fecha: Date | string
    cr_problema?: string | null
    cr_descripcion?: string | null
  }

  export type FormulariosUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_problema?: NullableStringFieldUpdateOperationsInput | string | null
    cr_descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormulariosUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_contenedor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_problema?: NullableStringFieldUpdateOperationsInput | string | null
    cr_descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SensoresCreateInput = {
    id?: bigint | number
    lecturas?: LecturasCreateNestedManyWithoutSensorInput
    contenedor: ContenedoresCreateNestedOneWithoutSensoresInput
  }

  export type SensoresUncheckedCreateInput = {
    id?: bigint | number
    cr_contenedor_id: bigint | number
    lecturas?: LecturasUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensoresUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    lecturas?: LecturasUpdateManyWithoutSensorNestedInput
    contenedor?: ContenedoresUpdateOneRequiredWithoutSensoresNestedInput
  }

  export type SensoresUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_contenedor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    lecturas?: LecturasUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type SensoresCreateManyInput = {
    id?: bigint | number
    cr_contenedor_id: bigint | number
  }

  export type SensoresUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type SensoresUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_contenedor_id?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LecturasCreateInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_distancia: Decimal | DecimalJsLike | number | string
    sensor: SensoresCreateNestedOneWithoutLecturasInput
  }

  export type LecturasUncheckedCreateInput = {
    id?: bigint | number
    cr_sensor_id: bigint | number
    cr_fecha: Date | string
    cr_distancia: Decimal | DecimalJsLike | number | string
  }

  export type LecturasUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_distancia?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sensor?: SensoresUpdateOneRequiredWithoutLecturasNestedInput
  }

  export type LecturasUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_sensor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_distancia?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type LecturasCreateManyInput = {
    id?: bigint | number
    cr_sensor_id: bigint | number
    cr_fecha: Date | string
    cr_distancia: Decimal | DecimalJsLike | number | string
  }

  export type LecturasUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_distancia?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type LecturasUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_sensor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_distancia?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TareasCreateInput = {
    id?: bigint | number
    cr_estado: boolean
    ruta: RutasCreateNestedOneWithoutTareasInput
    contenedor: ContenedoresCreateNestedOneWithoutTareasInput
    conductor?: ConductoresCreateNestedOneWithoutTareasInput
  }

  export type TareasUncheckedCreateInput = {
    id?: bigint | number
    cr_ruta_id: bigint | number
    cr_contenedor_id: bigint | number
    cr_conductor_id?: bigint | number | null
    cr_estado: boolean
  }

  export type TareasUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
    ruta?: RutasUpdateOneRequiredWithoutTareasNestedInput
    contenedor?: ContenedoresUpdateOneRequiredWithoutTareasNestedInput
    conductor?: ConductoresUpdateOneWithoutTareasNestedInput
  }

  export type TareasUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ruta_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_contenedor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_conductor_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TareasCreateManyInput = {
    id?: bigint | number
    cr_ruta_id: bigint | number
    cr_contenedor_id: bigint | number
    cr_conductor_id?: bigint | number | null
    cr_estado: boolean
  }

  export type TareasUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TareasUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ruta_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_contenedor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_conductor_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RutasListRelationFilter = {
    every?: RutasWhereInput
    some?: RutasWhereInput
    none?: RutasWhereInput
  }

  export type TareasListRelationFilter = {
    every?: TareasWhereInput
    some?: TareasWhereInput
    none?: TareasWhereInput
  }

  export type RutasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TareasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConductoresCountOrderByAggregateInput = {
    id?: SortOrder
    cr_nombre?: SortOrder
    cr_correo?: SortOrder
    cr_contrasenia?: SortOrder
  }

  export type ConductoresAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ConductoresMaxOrderByAggregateInput = {
    id?: SortOrder
    cr_nombre?: SortOrder
    cr_correo?: SortOrder
    cr_contrasenia?: SortOrder
  }

  export type ConductoresMinOrderByAggregateInput = {
    id?: SortOrder
    cr_nombre?: SortOrder
    cr_correo?: SortOrder
    cr_contrasenia?: SortOrder
  }

  export type ConductoresSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SensoresListRelationFilter = {
    every?: SensoresWhereInput
    some?: SensoresWhereInput
    none?: SensoresWhereInput
  }

  export type FormulariosListRelationFilter = {
    every?: FormulariosWhereInput
    some?: FormulariosWhereInput
    none?: FormulariosWhereInput
  }

  export type SensoresOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FormulariosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContenedoresCountOrderByAggregateInput = {
    id?: SortOrder
    cr_ubicacion?: SortOrder
    cr_codigo_qr?: SortOrder
    cr_nivel_llenado?: SortOrder
  }

  export type ContenedoresAvgOrderByAggregateInput = {
    id?: SortOrder
    cr_nivel_llenado?: SortOrder
  }

  export type ContenedoresMaxOrderByAggregateInput = {
    id?: SortOrder
    cr_ubicacion?: SortOrder
    cr_codigo_qr?: SortOrder
    cr_nivel_llenado?: SortOrder
  }

  export type ContenedoresMinOrderByAggregateInput = {
    id?: SortOrder
    cr_ubicacion?: SortOrder
    cr_codigo_qr?: SortOrder
    cr_nivel_llenado?: SortOrder
  }

  export type ContenedoresSumOrderByAggregateInput = {
    id?: SortOrder
    cr_nivel_llenado?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ConductoresScalarRelationFilter = {
    is?: ConductoresWhereInput
    isNot?: ConductoresWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RutasCountOrderByAggregateInput = {
    id?: SortOrder
    cr_conductor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_detalles?: SortOrder
  }

  export type RutasAvgOrderByAggregateInput = {
    id?: SortOrder
    cr_conductor_id?: SortOrder
  }

  export type RutasMaxOrderByAggregateInput = {
    id?: SortOrder
    cr_conductor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_detalles?: SortOrder
  }

  export type RutasMinOrderByAggregateInput = {
    id?: SortOrder
    cr_conductor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_detalles?: SortOrder
  }

  export type RutasSumOrderByAggregateInput = {
    id?: SortOrder
    cr_conductor_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ContenedoresScalarRelationFilter = {
    is?: ContenedoresWhereInput
    isNot?: ContenedoresWhereInput
  }

  export type FormulariosCountOrderByAggregateInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_problema?: SortOrder
    cr_descripcion?: SortOrder
  }

  export type FormulariosAvgOrderByAggregateInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
  }

  export type FormulariosMaxOrderByAggregateInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_problema?: SortOrder
    cr_descripcion?: SortOrder
  }

  export type FormulariosMinOrderByAggregateInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_problema?: SortOrder
    cr_descripcion?: SortOrder
  }

  export type FormulariosSumOrderByAggregateInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
  }

  export type LecturasListRelationFilter = {
    every?: LecturasWhereInput
    some?: LecturasWhereInput
    none?: LecturasWhereInput
  }

  export type LecturasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SensoresCountOrderByAggregateInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
  }

  export type SensoresAvgOrderByAggregateInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
  }

  export type SensoresMaxOrderByAggregateInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
  }

  export type SensoresMinOrderByAggregateInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
  }

  export type SensoresSumOrderByAggregateInput = {
    id?: SortOrder
    cr_contenedor_id?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type SensoresScalarRelationFilter = {
    is?: SensoresWhereInput
    isNot?: SensoresWhereInput
  }

  export type LecturasCountOrderByAggregateInput = {
    id?: SortOrder
    cr_sensor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_distancia?: SortOrder
  }

  export type LecturasAvgOrderByAggregateInput = {
    id?: SortOrder
    cr_sensor_id?: SortOrder
    cr_distancia?: SortOrder
  }

  export type LecturasMaxOrderByAggregateInput = {
    id?: SortOrder
    cr_sensor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_distancia?: SortOrder
  }

  export type LecturasMinOrderByAggregateInput = {
    id?: SortOrder
    cr_sensor_id?: SortOrder
    cr_fecha?: SortOrder
    cr_distancia?: SortOrder
  }

  export type LecturasSumOrderByAggregateInput = {
    id?: SortOrder
    cr_sensor_id?: SortOrder
    cr_distancia?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type RutasScalarRelationFilter = {
    is?: RutasWhereInput
    isNot?: RutasWhereInput
  }

  export type ConductoresNullableScalarRelationFilter = {
    is?: ConductoresWhereInput | null
    isNot?: ConductoresWhereInput | null
  }

  export type TareasCountOrderByAggregateInput = {
    id?: SortOrder
    cr_ruta_id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_conductor_id?: SortOrder
    cr_estado?: SortOrder
  }

  export type TareasAvgOrderByAggregateInput = {
    id?: SortOrder
    cr_ruta_id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_conductor_id?: SortOrder
  }

  export type TareasMaxOrderByAggregateInput = {
    id?: SortOrder
    cr_ruta_id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_conductor_id?: SortOrder
    cr_estado?: SortOrder
  }

  export type TareasMinOrderByAggregateInput = {
    id?: SortOrder
    cr_ruta_id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_conductor_id?: SortOrder
    cr_estado?: SortOrder
  }

  export type TareasSumOrderByAggregateInput = {
    id?: SortOrder
    cr_ruta_id?: SortOrder
    cr_contenedor_id?: SortOrder
    cr_conductor_id?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RutasCreateNestedManyWithoutConductorInput = {
    create?: XOR<RutasCreateWithoutConductorInput, RutasUncheckedCreateWithoutConductorInput> | RutasCreateWithoutConductorInput[] | RutasUncheckedCreateWithoutConductorInput[]
    connectOrCreate?: RutasCreateOrConnectWithoutConductorInput | RutasCreateOrConnectWithoutConductorInput[]
    createMany?: RutasCreateManyConductorInputEnvelope
    connect?: RutasWhereUniqueInput | RutasWhereUniqueInput[]
  }

  export type TareasCreateNestedManyWithoutConductorInput = {
    create?: XOR<TareasCreateWithoutConductorInput, TareasUncheckedCreateWithoutConductorInput> | TareasCreateWithoutConductorInput[] | TareasUncheckedCreateWithoutConductorInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutConductorInput | TareasCreateOrConnectWithoutConductorInput[]
    createMany?: TareasCreateManyConductorInputEnvelope
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
  }

  export type RutasUncheckedCreateNestedManyWithoutConductorInput = {
    create?: XOR<RutasCreateWithoutConductorInput, RutasUncheckedCreateWithoutConductorInput> | RutasCreateWithoutConductorInput[] | RutasUncheckedCreateWithoutConductorInput[]
    connectOrCreate?: RutasCreateOrConnectWithoutConductorInput | RutasCreateOrConnectWithoutConductorInput[]
    createMany?: RutasCreateManyConductorInputEnvelope
    connect?: RutasWhereUniqueInput | RutasWhereUniqueInput[]
  }

  export type TareasUncheckedCreateNestedManyWithoutConductorInput = {
    create?: XOR<TareasCreateWithoutConductorInput, TareasUncheckedCreateWithoutConductorInput> | TareasCreateWithoutConductorInput[] | TareasUncheckedCreateWithoutConductorInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutConductorInput | TareasCreateOrConnectWithoutConductorInput[]
    createMany?: TareasCreateManyConductorInputEnvelope
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RutasUpdateManyWithoutConductorNestedInput = {
    create?: XOR<RutasCreateWithoutConductorInput, RutasUncheckedCreateWithoutConductorInput> | RutasCreateWithoutConductorInput[] | RutasUncheckedCreateWithoutConductorInput[]
    connectOrCreate?: RutasCreateOrConnectWithoutConductorInput | RutasCreateOrConnectWithoutConductorInput[]
    upsert?: RutasUpsertWithWhereUniqueWithoutConductorInput | RutasUpsertWithWhereUniqueWithoutConductorInput[]
    createMany?: RutasCreateManyConductorInputEnvelope
    set?: RutasWhereUniqueInput | RutasWhereUniqueInput[]
    disconnect?: RutasWhereUniqueInput | RutasWhereUniqueInput[]
    delete?: RutasWhereUniqueInput | RutasWhereUniqueInput[]
    connect?: RutasWhereUniqueInput | RutasWhereUniqueInput[]
    update?: RutasUpdateWithWhereUniqueWithoutConductorInput | RutasUpdateWithWhereUniqueWithoutConductorInput[]
    updateMany?: RutasUpdateManyWithWhereWithoutConductorInput | RutasUpdateManyWithWhereWithoutConductorInput[]
    deleteMany?: RutasScalarWhereInput | RutasScalarWhereInput[]
  }

  export type TareasUpdateManyWithoutConductorNestedInput = {
    create?: XOR<TareasCreateWithoutConductorInput, TareasUncheckedCreateWithoutConductorInput> | TareasCreateWithoutConductorInput[] | TareasUncheckedCreateWithoutConductorInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutConductorInput | TareasCreateOrConnectWithoutConductorInput[]
    upsert?: TareasUpsertWithWhereUniqueWithoutConductorInput | TareasUpsertWithWhereUniqueWithoutConductorInput[]
    createMany?: TareasCreateManyConductorInputEnvelope
    set?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    disconnect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    delete?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    update?: TareasUpdateWithWhereUniqueWithoutConductorInput | TareasUpdateWithWhereUniqueWithoutConductorInput[]
    updateMany?: TareasUpdateManyWithWhereWithoutConductorInput | TareasUpdateManyWithWhereWithoutConductorInput[]
    deleteMany?: TareasScalarWhereInput | TareasScalarWhereInput[]
  }

  export type RutasUncheckedUpdateManyWithoutConductorNestedInput = {
    create?: XOR<RutasCreateWithoutConductorInput, RutasUncheckedCreateWithoutConductorInput> | RutasCreateWithoutConductorInput[] | RutasUncheckedCreateWithoutConductorInput[]
    connectOrCreate?: RutasCreateOrConnectWithoutConductorInput | RutasCreateOrConnectWithoutConductorInput[]
    upsert?: RutasUpsertWithWhereUniqueWithoutConductorInput | RutasUpsertWithWhereUniqueWithoutConductorInput[]
    createMany?: RutasCreateManyConductorInputEnvelope
    set?: RutasWhereUniqueInput | RutasWhereUniqueInput[]
    disconnect?: RutasWhereUniqueInput | RutasWhereUniqueInput[]
    delete?: RutasWhereUniqueInput | RutasWhereUniqueInput[]
    connect?: RutasWhereUniqueInput | RutasWhereUniqueInput[]
    update?: RutasUpdateWithWhereUniqueWithoutConductorInput | RutasUpdateWithWhereUniqueWithoutConductorInput[]
    updateMany?: RutasUpdateManyWithWhereWithoutConductorInput | RutasUpdateManyWithWhereWithoutConductorInput[]
    deleteMany?: RutasScalarWhereInput | RutasScalarWhereInput[]
  }

  export type TareasUncheckedUpdateManyWithoutConductorNestedInput = {
    create?: XOR<TareasCreateWithoutConductorInput, TareasUncheckedCreateWithoutConductorInput> | TareasCreateWithoutConductorInput[] | TareasUncheckedCreateWithoutConductorInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutConductorInput | TareasCreateOrConnectWithoutConductorInput[]
    upsert?: TareasUpsertWithWhereUniqueWithoutConductorInput | TareasUpsertWithWhereUniqueWithoutConductorInput[]
    createMany?: TareasCreateManyConductorInputEnvelope
    set?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    disconnect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    delete?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    update?: TareasUpdateWithWhereUniqueWithoutConductorInput | TareasUpdateWithWhereUniqueWithoutConductorInput[]
    updateMany?: TareasUpdateManyWithWhereWithoutConductorInput | TareasUpdateManyWithWhereWithoutConductorInput[]
    deleteMany?: TareasScalarWhereInput | TareasScalarWhereInput[]
  }

  export type SensoresCreateNestedManyWithoutContenedorInput = {
    create?: XOR<SensoresCreateWithoutContenedorInput, SensoresUncheckedCreateWithoutContenedorInput> | SensoresCreateWithoutContenedorInput[] | SensoresUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: SensoresCreateOrConnectWithoutContenedorInput | SensoresCreateOrConnectWithoutContenedorInput[]
    createMany?: SensoresCreateManyContenedorInputEnvelope
    connect?: SensoresWhereUniqueInput | SensoresWhereUniqueInput[]
  }

  export type FormulariosCreateNestedManyWithoutContenedorInput = {
    create?: XOR<FormulariosCreateWithoutContenedorInput, FormulariosUncheckedCreateWithoutContenedorInput> | FormulariosCreateWithoutContenedorInput[] | FormulariosUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: FormulariosCreateOrConnectWithoutContenedorInput | FormulariosCreateOrConnectWithoutContenedorInput[]
    createMany?: FormulariosCreateManyContenedorInputEnvelope
    connect?: FormulariosWhereUniqueInput | FormulariosWhereUniqueInput[]
  }

  export type TareasCreateNestedManyWithoutContenedorInput = {
    create?: XOR<TareasCreateWithoutContenedorInput, TareasUncheckedCreateWithoutContenedorInput> | TareasCreateWithoutContenedorInput[] | TareasUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutContenedorInput | TareasCreateOrConnectWithoutContenedorInput[]
    createMany?: TareasCreateManyContenedorInputEnvelope
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
  }

  export type SensoresUncheckedCreateNestedManyWithoutContenedorInput = {
    create?: XOR<SensoresCreateWithoutContenedorInput, SensoresUncheckedCreateWithoutContenedorInput> | SensoresCreateWithoutContenedorInput[] | SensoresUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: SensoresCreateOrConnectWithoutContenedorInput | SensoresCreateOrConnectWithoutContenedorInput[]
    createMany?: SensoresCreateManyContenedorInputEnvelope
    connect?: SensoresWhereUniqueInput | SensoresWhereUniqueInput[]
  }

  export type FormulariosUncheckedCreateNestedManyWithoutContenedorInput = {
    create?: XOR<FormulariosCreateWithoutContenedorInput, FormulariosUncheckedCreateWithoutContenedorInput> | FormulariosCreateWithoutContenedorInput[] | FormulariosUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: FormulariosCreateOrConnectWithoutContenedorInput | FormulariosCreateOrConnectWithoutContenedorInput[]
    createMany?: FormulariosCreateManyContenedorInputEnvelope
    connect?: FormulariosWhereUniqueInput | FormulariosWhereUniqueInput[]
  }

  export type TareasUncheckedCreateNestedManyWithoutContenedorInput = {
    create?: XOR<TareasCreateWithoutContenedorInput, TareasUncheckedCreateWithoutContenedorInput> | TareasCreateWithoutContenedorInput[] | TareasUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutContenedorInput | TareasCreateOrConnectWithoutContenedorInput[]
    createMany?: TareasCreateManyContenedorInputEnvelope
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SensoresUpdateManyWithoutContenedorNestedInput = {
    create?: XOR<SensoresCreateWithoutContenedorInput, SensoresUncheckedCreateWithoutContenedorInput> | SensoresCreateWithoutContenedorInput[] | SensoresUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: SensoresCreateOrConnectWithoutContenedorInput | SensoresCreateOrConnectWithoutContenedorInput[]
    upsert?: SensoresUpsertWithWhereUniqueWithoutContenedorInput | SensoresUpsertWithWhereUniqueWithoutContenedorInput[]
    createMany?: SensoresCreateManyContenedorInputEnvelope
    set?: SensoresWhereUniqueInput | SensoresWhereUniqueInput[]
    disconnect?: SensoresWhereUniqueInput | SensoresWhereUniqueInput[]
    delete?: SensoresWhereUniqueInput | SensoresWhereUniqueInput[]
    connect?: SensoresWhereUniqueInput | SensoresWhereUniqueInput[]
    update?: SensoresUpdateWithWhereUniqueWithoutContenedorInput | SensoresUpdateWithWhereUniqueWithoutContenedorInput[]
    updateMany?: SensoresUpdateManyWithWhereWithoutContenedorInput | SensoresUpdateManyWithWhereWithoutContenedorInput[]
    deleteMany?: SensoresScalarWhereInput | SensoresScalarWhereInput[]
  }

  export type FormulariosUpdateManyWithoutContenedorNestedInput = {
    create?: XOR<FormulariosCreateWithoutContenedorInput, FormulariosUncheckedCreateWithoutContenedorInput> | FormulariosCreateWithoutContenedorInput[] | FormulariosUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: FormulariosCreateOrConnectWithoutContenedorInput | FormulariosCreateOrConnectWithoutContenedorInput[]
    upsert?: FormulariosUpsertWithWhereUniqueWithoutContenedorInput | FormulariosUpsertWithWhereUniqueWithoutContenedorInput[]
    createMany?: FormulariosCreateManyContenedorInputEnvelope
    set?: FormulariosWhereUniqueInput | FormulariosWhereUniqueInput[]
    disconnect?: FormulariosWhereUniqueInput | FormulariosWhereUniqueInput[]
    delete?: FormulariosWhereUniqueInput | FormulariosWhereUniqueInput[]
    connect?: FormulariosWhereUniqueInput | FormulariosWhereUniqueInput[]
    update?: FormulariosUpdateWithWhereUniqueWithoutContenedorInput | FormulariosUpdateWithWhereUniqueWithoutContenedorInput[]
    updateMany?: FormulariosUpdateManyWithWhereWithoutContenedorInput | FormulariosUpdateManyWithWhereWithoutContenedorInput[]
    deleteMany?: FormulariosScalarWhereInput | FormulariosScalarWhereInput[]
  }

  export type TareasUpdateManyWithoutContenedorNestedInput = {
    create?: XOR<TareasCreateWithoutContenedorInput, TareasUncheckedCreateWithoutContenedorInput> | TareasCreateWithoutContenedorInput[] | TareasUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutContenedorInput | TareasCreateOrConnectWithoutContenedorInput[]
    upsert?: TareasUpsertWithWhereUniqueWithoutContenedorInput | TareasUpsertWithWhereUniqueWithoutContenedorInput[]
    createMany?: TareasCreateManyContenedorInputEnvelope
    set?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    disconnect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    delete?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    update?: TareasUpdateWithWhereUniqueWithoutContenedorInput | TareasUpdateWithWhereUniqueWithoutContenedorInput[]
    updateMany?: TareasUpdateManyWithWhereWithoutContenedorInput | TareasUpdateManyWithWhereWithoutContenedorInput[]
    deleteMany?: TareasScalarWhereInput | TareasScalarWhereInput[]
  }

  export type SensoresUncheckedUpdateManyWithoutContenedorNestedInput = {
    create?: XOR<SensoresCreateWithoutContenedorInput, SensoresUncheckedCreateWithoutContenedorInput> | SensoresCreateWithoutContenedorInput[] | SensoresUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: SensoresCreateOrConnectWithoutContenedorInput | SensoresCreateOrConnectWithoutContenedorInput[]
    upsert?: SensoresUpsertWithWhereUniqueWithoutContenedorInput | SensoresUpsertWithWhereUniqueWithoutContenedorInput[]
    createMany?: SensoresCreateManyContenedorInputEnvelope
    set?: SensoresWhereUniqueInput | SensoresWhereUniqueInput[]
    disconnect?: SensoresWhereUniqueInput | SensoresWhereUniqueInput[]
    delete?: SensoresWhereUniqueInput | SensoresWhereUniqueInput[]
    connect?: SensoresWhereUniqueInput | SensoresWhereUniqueInput[]
    update?: SensoresUpdateWithWhereUniqueWithoutContenedorInput | SensoresUpdateWithWhereUniqueWithoutContenedorInput[]
    updateMany?: SensoresUpdateManyWithWhereWithoutContenedorInput | SensoresUpdateManyWithWhereWithoutContenedorInput[]
    deleteMany?: SensoresScalarWhereInput | SensoresScalarWhereInput[]
  }

  export type FormulariosUncheckedUpdateManyWithoutContenedorNestedInput = {
    create?: XOR<FormulariosCreateWithoutContenedorInput, FormulariosUncheckedCreateWithoutContenedorInput> | FormulariosCreateWithoutContenedorInput[] | FormulariosUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: FormulariosCreateOrConnectWithoutContenedorInput | FormulariosCreateOrConnectWithoutContenedorInput[]
    upsert?: FormulariosUpsertWithWhereUniqueWithoutContenedorInput | FormulariosUpsertWithWhereUniqueWithoutContenedorInput[]
    createMany?: FormulariosCreateManyContenedorInputEnvelope
    set?: FormulariosWhereUniqueInput | FormulariosWhereUniqueInput[]
    disconnect?: FormulariosWhereUniqueInput | FormulariosWhereUniqueInput[]
    delete?: FormulariosWhereUniqueInput | FormulariosWhereUniqueInput[]
    connect?: FormulariosWhereUniqueInput | FormulariosWhereUniqueInput[]
    update?: FormulariosUpdateWithWhereUniqueWithoutContenedorInput | FormulariosUpdateWithWhereUniqueWithoutContenedorInput[]
    updateMany?: FormulariosUpdateManyWithWhereWithoutContenedorInput | FormulariosUpdateManyWithWhereWithoutContenedorInput[]
    deleteMany?: FormulariosScalarWhereInput | FormulariosScalarWhereInput[]
  }

  export type TareasUncheckedUpdateManyWithoutContenedorNestedInput = {
    create?: XOR<TareasCreateWithoutContenedorInput, TareasUncheckedCreateWithoutContenedorInput> | TareasCreateWithoutContenedorInput[] | TareasUncheckedCreateWithoutContenedorInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutContenedorInput | TareasCreateOrConnectWithoutContenedorInput[]
    upsert?: TareasUpsertWithWhereUniqueWithoutContenedorInput | TareasUpsertWithWhereUniqueWithoutContenedorInput[]
    createMany?: TareasCreateManyContenedorInputEnvelope
    set?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    disconnect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    delete?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    update?: TareasUpdateWithWhereUniqueWithoutContenedorInput | TareasUpdateWithWhereUniqueWithoutContenedorInput[]
    updateMany?: TareasUpdateManyWithWhereWithoutContenedorInput | TareasUpdateManyWithWhereWithoutContenedorInput[]
    deleteMany?: TareasScalarWhereInput | TareasScalarWhereInput[]
  }

  export type ConductoresCreateNestedOneWithoutRutasInput = {
    create?: XOR<ConductoresCreateWithoutRutasInput, ConductoresUncheckedCreateWithoutRutasInput>
    connectOrCreate?: ConductoresCreateOrConnectWithoutRutasInput
    connect?: ConductoresWhereUniqueInput
  }

  export type TareasCreateNestedManyWithoutRutaInput = {
    create?: XOR<TareasCreateWithoutRutaInput, TareasUncheckedCreateWithoutRutaInput> | TareasCreateWithoutRutaInput[] | TareasUncheckedCreateWithoutRutaInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutRutaInput | TareasCreateOrConnectWithoutRutaInput[]
    createMany?: TareasCreateManyRutaInputEnvelope
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
  }

  export type TareasUncheckedCreateNestedManyWithoutRutaInput = {
    create?: XOR<TareasCreateWithoutRutaInput, TareasUncheckedCreateWithoutRutaInput> | TareasCreateWithoutRutaInput[] | TareasUncheckedCreateWithoutRutaInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutRutaInput | TareasCreateOrConnectWithoutRutaInput[]
    createMany?: TareasCreateManyRutaInputEnvelope
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ConductoresUpdateOneRequiredWithoutRutasNestedInput = {
    create?: XOR<ConductoresCreateWithoutRutasInput, ConductoresUncheckedCreateWithoutRutasInput>
    connectOrCreate?: ConductoresCreateOrConnectWithoutRutasInput
    upsert?: ConductoresUpsertWithoutRutasInput
    connect?: ConductoresWhereUniqueInput
    update?: XOR<XOR<ConductoresUpdateToOneWithWhereWithoutRutasInput, ConductoresUpdateWithoutRutasInput>, ConductoresUncheckedUpdateWithoutRutasInput>
  }

  export type TareasUpdateManyWithoutRutaNestedInput = {
    create?: XOR<TareasCreateWithoutRutaInput, TareasUncheckedCreateWithoutRutaInput> | TareasCreateWithoutRutaInput[] | TareasUncheckedCreateWithoutRutaInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutRutaInput | TareasCreateOrConnectWithoutRutaInput[]
    upsert?: TareasUpsertWithWhereUniqueWithoutRutaInput | TareasUpsertWithWhereUniqueWithoutRutaInput[]
    createMany?: TareasCreateManyRutaInputEnvelope
    set?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    disconnect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    delete?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    update?: TareasUpdateWithWhereUniqueWithoutRutaInput | TareasUpdateWithWhereUniqueWithoutRutaInput[]
    updateMany?: TareasUpdateManyWithWhereWithoutRutaInput | TareasUpdateManyWithWhereWithoutRutaInput[]
    deleteMany?: TareasScalarWhereInput | TareasScalarWhereInput[]
  }

  export type TareasUncheckedUpdateManyWithoutRutaNestedInput = {
    create?: XOR<TareasCreateWithoutRutaInput, TareasUncheckedCreateWithoutRutaInput> | TareasCreateWithoutRutaInput[] | TareasUncheckedCreateWithoutRutaInput[]
    connectOrCreate?: TareasCreateOrConnectWithoutRutaInput | TareasCreateOrConnectWithoutRutaInput[]
    upsert?: TareasUpsertWithWhereUniqueWithoutRutaInput | TareasUpsertWithWhereUniqueWithoutRutaInput[]
    createMany?: TareasCreateManyRutaInputEnvelope
    set?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    disconnect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    delete?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    connect?: TareasWhereUniqueInput | TareasWhereUniqueInput[]
    update?: TareasUpdateWithWhereUniqueWithoutRutaInput | TareasUpdateWithWhereUniqueWithoutRutaInput[]
    updateMany?: TareasUpdateManyWithWhereWithoutRutaInput | TareasUpdateManyWithWhereWithoutRutaInput[]
    deleteMany?: TareasScalarWhereInput | TareasScalarWhereInput[]
  }

  export type ContenedoresCreateNestedOneWithoutFormulariosInput = {
    create?: XOR<ContenedoresCreateWithoutFormulariosInput, ContenedoresUncheckedCreateWithoutFormulariosInput>
    connectOrCreate?: ContenedoresCreateOrConnectWithoutFormulariosInput
    connect?: ContenedoresWhereUniqueInput
  }

  export type ContenedoresUpdateOneRequiredWithoutFormulariosNestedInput = {
    create?: XOR<ContenedoresCreateWithoutFormulariosInput, ContenedoresUncheckedCreateWithoutFormulariosInput>
    connectOrCreate?: ContenedoresCreateOrConnectWithoutFormulariosInput
    upsert?: ContenedoresUpsertWithoutFormulariosInput
    connect?: ContenedoresWhereUniqueInput
    update?: XOR<XOR<ContenedoresUpdateToOneWithWhereWithoutFormulariosInput, ContenedoresUpdateWithoutFormulariosInput>, ContenedoresUncheckedUpdateWithoutFormulariosInput>
  }

  export type LecturasCreateNestedManyWithoutSensorInput = {
    create?: XOR<LecturasCreateWithoutSensorInput, LecturasUncheckedCreateWithoutSensorInput> | LecturasCreateWithoutSensorInput[] | LecturasUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: LecturasCreateOrConnectWithoutSensorInput | LecturasCreateOrConnectWithoutSensorInput[]
    createMany?: LecturasCreateManySensorInputEnvelope
    connect?: LecturasWhereUniqueInput | LecturasWhereUniqueInput[]
  }

  export type ContenedoresCreateNestedOneWithoutSensoresInput = {
    create?: XOR<ContenedoresCreateWithoutSensoresInput, ContenedoresUncheckedCreateWithoutSensoresInput>
    connectOrCreate?: ContenedoresCreateOrConnectWithoutSensoresInput
    connect?: ContenedoresWhereUniqueInput
  }

  export type LecturasUncheckedCreateNestedManyWithoutSensorInput = {
    create?: XOR<LecturasCreateWithoutSensorInput, LecturasUncheckedCreateWithoutSensorInput> | LecturasCreateWithoutSensorInput[] | LecturasUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: LecturasCreateOrConnectWithoutSensorInput | LecturasCreateOrConnectWithoutSensorInput[]
    createMany?: LecturasCreateManySensorInputEnvelope
    connect?: LecturasWhereUniqueInput | LecturasWhereUniqueInput[]
  }

  export type LecturasUpdateManyWithoutSensorNestedInput = {
    create?: XOR<LecturasCreateWithoutSensorInput, LecturasUncheckedCreateWithoutSensorInput> | LecturasCreateWithoutSensorInput[] | LecturasUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: LecturasCreateOrConnectWithoutSensorInput | LecturasCreateOrConnectWithoutSensorInput[]
    upsert?: LecturasUpsertWithWhereUniqueWithoutSensorInput | LecturasUpsertWithWhereUniqueWithoutSensorInput[]
    createMany?: LecturasCreateManySensorInputEnvelope
    set?: LecturasWhereUniqueInput | LecturasWhereUniqueInput[]
    disconnect?: LecturasWhereUniqueInput | LecturasWhereUniqueInput[]
    delete?: LecturasWhereUniqueInput | LecturasWhereUniqueInput[]
    connect?: LecturasWhereUniqueInput | LecturasWhereUniqueInput[]
    update?: LecturasUpdateWithWhereUniqueWithoutSensorInput | LecturasUpdateWithWhereUniqueWithoutSensorInput[]
    updateMany?: LecturasUpdateManyWithWhereWithoutSensorInput | LecturasUpdateManyWithWhereWithoutSensorInput[]
    deleteMany?: LecturasScalarWhereInput | LecturasScalarWhereInput[]
  }

  export type ContenedoresUpdateOneRequiredWithoutSensoresNestedInput = {
    create?: XOR<ContenedoresCreateWithoutSensoresInput, ContenedoresUncheckedCreateWithoutSensoresInput>
    connectOrCreate?: ContenedoresCreateOrConnectWithoutSensoresInput
    upsert?: ContenedoresUpsertWithoutSensoresInput
    connect?: ContenedoresWhereUniqueInput
    update?: XOR<XOR<ContenedoresUpdateToOneWithWhereWithoutSensoresInput, ContenedoresUpdateWithoutSensoresInput>, ContenedoresUncheckedUpdateWithoutSensoresInput>
  }

  export type LecturasUncheckedUpdateManyWithoutSensorNestedInput = {
    create?: XOR<LecturasCreateWithoutSensorInput, LecturasUncheckedCreateWithoutSensorInput> | LecturasCreateWithoutSensorInput[] | LecturasUncheckedCreateWithoutSensorInput[]
    connectOrCreate?: LecturasCreateOrConnectWithoutSensorInput | LecturasCreateOrConnectWithoutSensorInput[]
    upsert?: LecturasUpsertWithWhereUniqueWithoutSensorInput | LecturasUpsertWithWhereUniqueWithoutSensorInput[]
    createMany?: LecturasCreateManySensorInputEnvelope
    set?: LecturasWhereUniqueInput | LecturasWhereUniqueInput[]
    disconnect?: LecturasWhereUniqueInput | LecturasWhereUniqueInput[]
    delete?: LecturasWhereUniqueInput | LecturasWhereUniqueInput[]
    connect?: LecturasWhereUniqueInput | LecturasWhereUniqueInput[]
    update?: LecturasUpdateWithWhereUniqueWithoutSensorInput | LecturasUpdateWithWhereUniqueWithoutSensorInput[]
    updateMany?: LecturasUpdateManyWithWhereWithoutSensorInput | LecturasUpdateManyWithWhereWithoutSensorInput[]
    deleteMany?: LecturasScalarWhereInput | LecturasScalarWhereInput[]
  }

  export type SensoresCreateNestedOneWithoutLecturasInput = {
    create?: XOR<SensoresCreateWithoutLecturasInput, SensoresUncheckedCreateWithoutLecturasInput>
    connectOrCreate?: SensoresCreateOrConnectWithoutLecturasInput
    connect?: SensoresWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type SensoresUpdateOneRequiredWithoutLecturasNestedInput = {
    create?: XOR<SensoresCreateWithoutLecturasInput, SensoresUncheckedCreateWithoutLecturasInput>
    connectOrCreate?: SensoresCreateOrConnectWithoutLecturasInput
    upsert?: SensoresUpsertWithoutLecturasInput
    connect?: SensoresWhereUniqueInput
    update?: XOR<XOR<SensoresUpdateToOneWithWhereWithoutLecturasInput, SensoresUpdateWithoutLecturasInput>, SensoresUncheckedUpdateWithoutLecturasInput>
  }

  export type RutasCreateNestedOneWithoutTareasInput = {
    create?: XOR<RutasCreateWithoutTareasInput, RutasUncheckedCreateWithoutTareasInput>
    connectOrCreate?: RutasCreateOrConnectWithoutTareasInput
    connect?: RutasWhereUniqueInput
  }

  export type ContenedoresCreateNestedOneWithoutTareasInput = {
    create?: XOR<ContenedoresCreateWithoutTareasInput, ContenedoresUncheckedCreateWithoutTareasInput>
    connectOrCreate?: ContenedoresCreateOrConnectWithoutTareasInput
    connect?: ContenedoresWhereUniqueInput
  }

  export type ConductoresCreateNestedOneWithoutTareasInput = {
    create?: XOR<ConductoresCreateWithoutTareasInput, ConductoresUncheckedCreateWithoutTareasInput>
    connectOrCreate?: ConductoresCreateOrConnectWithoutTareasInput
    connect?: ConductoresWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type RutasUpdateOneRequiredWithoutTareasNestedInput = {
    create?: XOR<RutasCreateWithoutTareasInput, RutasUncheckedCreateWithoutTareasInput>
    connectOrCreate?: RutasCreateOrConnectWithoutTareasInput
    upsert?: RutasUpsertWithoutTareasInput
    connect?: RutasWhereUniqueInput
    update?: XOR<XOR<RutasUpdateToOneWithWhereWithoutTareasInput, RutasUpdateWithoutTareasInput>, RutasUncheckedUpdateWithoutTareasInput>
  }

  export type ContenedoresUpdateOneRequiredWithoutTareasNestedInput = {
    create?: XOR<ContenedoresCreateWithoutTareasInput, ContenedoresUncheckedCreateWithoutTareasInput>
    connectOrCreate?: ContenedoresCreateOrConnectWithoutTareasInput
    upsert?: ContenedoresUpsertWithoutTareasInput
    connect?: ContenedoresWhereUniqueInput
    update?: XOR<XOR<ContenedoresUpdateToOneWithWhereWithoutTareasInput, ContenedoresUpdateWithoutTareasInput>, ContenedoresUncheckedUpdateWithoutTareasInput>
  }

  export type ConductoresUpdateOneWithoutTareasNestedInput = {
    create?: XOR<ConductoresCreateWithoutTareasInput, ConductoresUncheckedCreateWithoutTareasInput>
    connectOrCreate?: ConductoresCreateOrConnectWithoutTareasInput
    upsert?: ConductoresUpsertWithoutTareasInput
    disconnect?: ConductoresWhereInput | boolean
    delete?: ConductoresWhereInput | boolean
    connect?: ConductoresWhereUniqueInput
    update?: XOR<XOR<ConductoresUpdateToOneWithWhereWithoutTareasInput, ConductoresUpdateWithoutTareasInput>, ConductoresUncheckedUpdateWithoutTareasInput>
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RutasCreateWithoutConductorInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_detalles?: string | null
    tareas?: TareasCreateNestedManyWithoutRutaInput
  }

  export type RutasUncheckedCreateWithoutConductorInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_detalles?: string | null
    tareas?: TareasUncheckedCreateNestedManyWithoutRutaInput
  }

  export type RutasCreateOrConnectWithoutConductorInput = {
    where: RutasWhereUniqueInput
    create: XOR<RutasCreateWithoutConductorInput, RutasUncheckedCreateWithoutConductorInput>
  }

  export type RutasCreateManyConductorInputEnvelope = {
    data: RutasCreateManyConductorInput | RutasCreateManyConductorInput[]
    skipDuplicates?: boolean
  }

  export type TareasCreateWithoutConductorInput = {
    id?: bigint | number
    cr_estado: boolean
    ruta: RutasCreateNestedOneWithoutTareasInput
    contenedor: ContenedoresCreateNestedOneWithoutTareasInput
  }

  export type TareasUncheckedCreateWithoutConductorInput = {
    id?: bigint | number
    cr_ruta_id: bigint | number
    cr_contenedor_id: bigint | number
    cr_estado: boolean
  }

  export type TareasCreateOrConnectWithoutConductorInput = {
    where: TareasWhereUniqueInput
    create: XOR<TareasCreateWithoutConductorInput, TareasUncheckedCreateWithoutConductorInput>
  }

  export type TareasCreateManyConductorInputEnvelope = {
    data: TareasCreateManyConductorInput | TareasCreateManyConductorInput[]
    skipDuplicates?: boolean
  }

  export type RutasUpsertWithWhereUniqueWithoutConductorInput = {
    where: RutasWhereUniqueInput
    update: XOR<RutasUpdateWithoutConductorInput, RutasUncheckedUpdateWithoutConductorInput>
    create: XOR<RutasCreateWithoutConductorInput, RutasUncheckedCreateWithoutConductorInput>
  }

  export type RutasUpdateWithWhereUniqueWithoutConductorInput = {
    where: RutasWhereUniqueInput
    data: XOR<RutasUpdateWithoutConductorInput, RutasUncheckedUpdateWithoutConductorInput>
  }

  export type RutasUpdateManyWithWhereWithoutConductorInput = {
    where: RutasScalarWhereInput
    data: XOR<RutasUpdateManyMutationInput, RutasUncheckedUpdateManyWithoutConductorInput>
  }

  export type RutasScalarWhereInput = {
    AND?: RutasScalarWhereInput | RutasScalarWhereInput[]
    OR?: RutasScalarWhereInput[]
    NOT?: RutasScalarWhereInput | RutasScalarWhereInput[]
    id?: BigIntFilter<"Rutas"> | bigint | number
    cr_conductor_id?: BigIntFilter<"Rutas"> | bigint | number
    cr_fecha?: DateTimeFilter<"Rutas"> | Date | string
    cr_detalles?: StringNullableFilter<"Rutas"> | string | null
  }

  export type TareasUpsertWithWhereUniqueWithoutConductorInput = {
    where: TareasWhereUniqueInput
    update: XOR<TareasUpdateWithoutConductorInput, TareasUncheckedUpdateWithoutConductorInput>
    create: XOR<TareasCreateWithoutConductorInput, TareasUncheckedCreateWithoutConductorInput>
  }

  export type TareasUpdateWithWhereUniqueWithoutConductorInput = {
    where: TareasWhereUniqueInput
    data: XOR<TareasUpdateWithoutConductorInput, TareasUncheckedUpdateWithoutConductorInput>
  }

  export type TareasUpdateManyWithWhereWithoutConductorInput = {
    where: TareasScalarWhereInput
    data: XOR<TareasUpdateManyMutationInput, TareasUncheckedUpdateManyWithoutConductorInput>
  }

  export type TareasScalarWhereInput = {
    AND?: TareasScalarWhereInput | TareasScalarWhereInput[]
    OR?: TareasScalarWhereInput[]
    NOT?: TareasScalarWhereInput | TareasScalarWhereInput[]
    id?: BigIntFilter<"Tareas"> | bigint | number
    cr_ruta_id?: BigIntFilter<"Tareas"> | bigint | number
    cr_contenedor_id?: BigIntFilter<"Tareas"> | bigint | number
    cr_conductor_id?: BigIntNullableFilter<"Tareas"> | bigint | number | null
    cr_estado?: BoolFilter<"Tareas"> | boolean
  }

  export type SensoresCreateWithoutContenedorInput = {
    id?: bigint | number
    lecturas?: LecturasCreateNestedManyWithoutSensorInput
  }

  export type SensoresUncheckedCreateWithoutContenedorInput = {
    id?: bigint | number
    lecturas?: LecturasUncheckedCreateNestedManyWithoutSensorInput
  }

  export type SensoresCreateOrConnectWithoutContenedorInput = {
    where: SensoresWhereUniqueInput
    create: XOR<SensoresCreateWithoutContenedorInput, SensoresUncheckedCreateWithoutContenedorInput>
  }

  export type SensoresCreateManyContenedorInputEnvelope = {
    data: SensoresCreateManyContenedorInput | SensoresCreateManyContenedorInput[]
    skipDuplicates?: boolean
  }

  export type FormulariosCreateWithoutContenedorInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_problema?: string | null
    cr_descripcion?: string | null
  }

  export type FormulariosUncheckedCreateWithoutContenedorInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_problema?: string | null
    cr_descripcion?: string | null
  }

  export type FormulariosCreateOrConnectWithoutContenedorInput = {
    where: FormulariosWhereUniqueInput
    create: XOR<FormulariosCreateWithoutContenedorInput, FormulariosUncheckedCreateWithoutContenedorInput>
  }

  export type FormulariosCreateManyContenedorInputEnvelope = {
    data: FormulariosCreateManyContenedorInput | FormulariosCreateManyContenedorInput[]
    skipDuplicates?: boolean
  }

  export type TareasCreateWithoutContenedorInput = {
    id?: bigint | number
    cr_estado: boolean
    ruta: RutasCreateNestedOneWithoutTareasInput
    conductor?: ConductoresCreateNestedOneWithoutTareasInput
  }

  export type TareasUncheckedCreateWithoutContenedorInput = {
    id?: bigint | number
    cr_ruta_id: bigint | number
    cr_conductor_id?: bigint | number | null
    cr_estado: boolean
  }

  export type TareasCreateOrConnectWithoutContenedorInput = {
    where: TareasWhereUniqueInput
    create: XOR<TareasCreateWithoutContenedorInput, TareasUncheckedCreateWithoutContenedorInput>
  }

  export type TareasCreateManyContenedorInputEnvelope = {
    data: TareasCreateManyContenedorInput | TareasCreateManyContenedorInput[]
    skipDuplicates?: boolean
  }

  export type SensoresUpsertWithWhereUniqueWithoutContenedorInput = {
    where: SensoresWhereUniqueInput
    update: XOR<SensoresUpdateWithoutContenedorInput, SensoresUncheckedUpdateWithoutContenedorInput>
    create: XOR<SensoresCreateWithoutContenedorInput, SensoresUncheckedCreateWithoutContenedorInput>
  }

  export type SensoresUpdateWithWhereUniqueWithoutContenedorInput = {
    where: SensoresWhereUniqueInput
    data: XOR<SensoresUpdateWithoutContenedorInput, SensoresUncheckedUpdateWithoutContenedorInput>
  }

  export type SensoresUpdateManyWithWhereWithoutContenedorInput = {
    where: SensoresScalarWhereInput
    data: XOR<SensoresUpdateManyMutationInput, SensoresUncheckedUpdateManyWithoutContenedorInput>
  }

  export type SensoresScalarWhereInput = {
    AND?: SensoresScalarWhereInput | SensoresScalarWhereInput[]
    OR?: SensoresScalarWhereInput[]
    NOT?: SensoresScalarWhereInput | SensoresScalarWhereInput[]
    id?: BigIntFilter<"Sensores"> | bigint | number
    cr_contenedor_id?: BigIntFilter<"Sensores"> | bigint | number
  }

  export type FormulariosUpsertWithWhereUniqueWithoutContenedorInput = {
    where: FormulariosWhereUniqueInput
    update: XOR<FormulariosUpdateWithoutContenedorInput, FormulariosUncheckedUpdateWithoutContenedorInput>
    create: XOR<FormulariosCreateWithoutContenedorInput, FormulariosUncheckedCreateWithoutContenedorInput>
  }

  export type FormulariosUpdateWithWhereUniqueWithoutContenedorInput = {
    where: FormulariosWhereUniqueInput
    data: XOR<FormulariosUpdateWithoutContenedorInput, FormulariosUncheckedUpdateWithoutContenedorInput>
  }

  export type FormulariosUpdateManyWithWhereWithoutContenedorInput = {
    where: FormulariosScalarWhereInput
    data: XOR<FormulariosUpdateManyMutationInput, FormulariosUncheckedUpdateManyWithoutContenedorInput>
  }

  export type FormulariosScalarWhereInput = {
    AND?: FormulariosScalarWhereInput | FormulariosScalarWhereInput[]
    OR?: FormulariosScalarWhereInput[]
    NOT?: FormulariosScalarWhereInput | FormulariosScalarWhereInput[]
    id?: BigIntFilter<"Formularios"> | bigint | number
    cr_contenedor_id?: BigIntFilter<"Formularios"> | bigint | number
    cr_fecha?: DateTimeFilter<"Formularios"> | Date | string
    cr_problema?: StringNullableFilter<"Formularios"> | string | null
    cr_descripcion?: StringNullableFilter<"Formularios"> | string | null
  }

  export type TareasUpsertWithWhereUniqueWithoutContenedorInput = {
    where: TareasWhereUniqueInput
    update: XOR<TareasUpdateWithoutContenedorInput, TareasUncheckedUpdateWithoutContenedorInput>
    create: XOR<TareasCreateWithoutContenedorInput, TareasUncheckedCreateWithoutContenedorInput>
  }

  export type TareasUpdateWithWhereUniqueWithoutContenedorInput = {
    where: TareasWhereUniqueInput
    data: XOR<TareasUpdateWithoutContenedorInput, TareasUncheckedUpdateWithoutContenedorInput>
  }

  export type TareasUpdateManyWithWhereWithoutContenedorInput = {
    where: TareasScalarWhereInput
    data: XOR<TareasUpdateManyMutationInput, TareasUncheckedUpdateManyWithoutContenedorInput>
  }

  export type ConductoresCreateWithoutRutasInput = {
    id?: bigint | number
    cr_nombre: string
    cr_correo: string
    cr_contrasenia: string
    tareas?: TareasCreateNestedManyWithoutConductorInput
  }

  export type ConductoresUncheckedCreateWithoutRutasInput = {
    id?: bigint | number
    cr_nombre: string
    cr_correo: string
    cr_contrasenia: string
    tareas?: TareasUncheckedCreateNestedManyWithoutConductorInput
  }

  export type ConductoresCreateOrConnectWithoutRutasInput = {
    where: ConductoresWhereUniqueInput
    create: XOR<ConductoresCreateWithoutRutasInput, ConductoresUncheckedCreateWithoutRutasInput>
  }

  export type TareasCreateWithoutRutaInput = {
    id?: bigint | number
    cr_estado: boolean
    contenedor: ContenedoresCreateNestedOneWithoutTareasInput
    conductor?: ConductoresCreateNestedOneWithoutTareasInput
  }

  export type TareasUncheckedCreateWithoutRutaInput = {
    id?: bigint | number
    cr_contenedor_id: bigint | number
    cr_conductor_id?: bigint | number | null
    cr_estado: boolean
  }

  export type TareasCreateOrConnectWithoutRutaInput = {
    where: TareasWhereUniqueInput
    create: XOR<TareasCreateWithoutRutaInput, TareasUncheckedCreateWithoutRutaInput>
  }

  export type TareasCreateManyRutaInputEnvelope = {
    data: TareasCreateManyRutaInput | TareasCreateManyRutaInput[]
    skipDuplicates?: boolean
  }

  export type ConductoresUpsertWithoutRutasInput = {
    update: XOR<ConductoresUpdateWithoutRutasInput, ConductoresUncheckedUpdateWithoutRutasInput>
    create: XOR<ConductoresCreateWithoutRutasInput, ConductoresUncheckedCreateWithoutRutasInput>
    where?: ConductoresWhereInput
  }

  export type ConductoresUpdateToOneWithWhereWithoutRutasInput = {
    where?: ConductoresWhereInput
    data: XOR<ConductoresUpdateWithoutRutasInput, ConductoresUncheckedUpdateWithoutRutasInput>
  }

  export type ConductoresUpdateWithoutRutasInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_nombre?: StringFieldUpdateOperationsInput | string
    cr_correo?: StringFieldUpdateOperationsInput | string
    cr_contrasenia?: StringFieldUpdateOperationsInput | string
    tareas?: TareasUpdateManyWithoutConductorNestedInput
  }

  export type ConductoresUncheckedUpdateWithoutRutasInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_nombre?: StringFieldUpdateOperationsInput | string
    cr_correo?: StringFieldUpdateOperationsInput | string
    cr_contrasenia?: StringFieldUpdateOperationsInput | string
    tareas?: TareasUncheckedUpdateManyWithoutConductorNestedInput
  }

  export type TareasUpsertWithWhereUniqueWithoutRutaInput = {
    where: TareasWhereUniqueInput
    update: XOR<TareasUpdateWithoutRutaInput, TareasUncheckedUpdateWithoutRutaInput>
    create: XOR<TareasCreateWithoutRutaInput, TareasUncheckedCreateWithoutRutaInput>
  }

  export type TareasUpdateWithWhereUniqueWithoutRutaInput = {
    where: TareasWhereUniqueInput
    data: XOR<TareasUpdateWithoutRutaInput, TareasUncheckedUpdateWithoutRutaInput>
  }

  export type TareasUpdateManyWithWhereWithoutRutaInput = {
    where: TareasScalarWhereInput
    data: XOR<TareasUpdateManyMutationInput, TareasUncheckedUpdateManyWithoutRutaInput>
  }

  export type ContenedoresCreateWithoutFormulariosInput = {
    id?: bigint | number
    cr_ubicacion: string
    cr_codigo_qr: string
    cr_nivel_llenado?: number
    sensores?: SensoresCreateNestedManyWithoutContenedorInput
    tareas?: TareasCreateNestedManyWithoutContenedorInput
  }

  export type ContenedoresUncheckedCreateWithoutFormulariosInput = {
    id?: bigint | number
    cr_ubicacion: string
    cr_codigo_qr: string
    cr_nivel_llenado?: number
    sensores?: SensoresUncheckedCreateNestedManyWithoutContenedorInput
    tareas?: TareasUncheckedCreateNestedManyWithoutContenedorInput
  }

  export type ContenedoresCreateOrConnectWithoutFormulariosInput = {
    where: ContenedoresWhereUniqueInput
    create: XOR<ContenedoresCreateWithoutFormulariosInput, ContenedoresUncheckedCreateWithoutFormulariosInput>
  }

  export type ContenedoresUpsertWithoutFormulariosInput = {
    update: XOR<ContenedoresUpdateWithoutFormulariosInput, ContenedoresUncheckedUpdateWithoutFormulariosInput>
    create: XOR<ContenedoresCreateWithoutFormulariosInput, ContenedoresUncheckedCreateWithoutFormulariosInput>
    where?: ContenedoresWhereInput
  }

  export type ContenedoresUpdateToOneWithWhereWithoutFormulariosInput = {
    where?: ContenedoresWhereInput
    data: XOR<ContenedoresUpdateWithoutFormulariosInput, ContenedoresUncheckedUpdateWithoutFormulariosInput>
  }

  export type ContenedoresUpdateWithoutFormulariosInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ubicacion?: StringFieldUpdateOperationsInput | string
    cr_codigo_qr?: StringFieldUpdateOperationsInput | string
    cr_nivel_llenado?: IntFieldUpdateOperationsInput | number
    sensores?: SensoresUpdateManyWithoutContenedorNestedInput
    tareas?: TareasUpdateManyWithoutContenedorNestedInput
  }

  export type ContenedoresUncheckedUpdateWithoutFormulariosInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ubicacion?: StringFieldUpdateOperationsInput | string
    cr_codigo_qr?: StringFieldUpdateOperationsInput | string
    cr_nivel_llenado?: IntFieldUpdateOperationsInput | number
    sensores?: SensoresUncheckedUpdateManyWithoutContenedorNestedInput
    tareas?: TareasUncheckedUpdateManyWithoutContenedorNestedInput
  }

  export type LecturasCreateWithoutSensorInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_distancia: Decimal | DecimalJsLike | number | string
  }

  export type LecturasUncheckedCreateWithoutSensorInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_distancia: Decimal | DecimalJsLike | number | string
  }

  export type LecturasCreateOrConnectWithoutSensorInput = {
    where: LecturasWhereUniqueInput
    create: XOR<LecturasCreateWithoutSensorInput, LecturasUncheckedCreateWithoutSensorInput>
  }

  export type LecturasCreateManySensorInputEnvelope = {
    data: LecturasCreateManySensorInput | LecturasCreateManySensorInput[]
    skipDuplicates?: boolean
  }

  export type ContenedoresCreateWithoutSensoresInput = {
    id?: bigint | number
    cr_ubicacion: string
    cr_codigo_qr: string
    cr_nivel_llenado?: number
    formularios?: FormulariosCreateNestedManyWithoutContenedorInput
    tareas?: TareasCreateNestedManyWithoutContenedorInput
  }

  export type ContenedoresUncheckedCreateWithoutSensoresInput = {
    id?: bigint | number
    cr_ubicacion: string
    cr_codigo_qr: string
    cr_nivel_llenado?: number
    formularios?: FormulariosUncheckedCreateNestedManyWithoutContenedorInput
    tareas?: TareasUncheckedCreateNestedManyWithoutContenedorInput
  }

  export type ContenedoresCreateOrConnectWithoutSensoresInput = {
    where: ContenedoresWhereUniqueInput
    create: XOR<ContenedoresCreateWithoutSensoresInput, ContenedoresUncheckedCreateWithoutSensoresInput>
  }

  export type LecturasUpsertWithWhereUniqueWithoutSensorInput = {
    where: LecturasWhereUniqueInput
    update: XOR<LecturasUpdateWithoutSensorInput, LecturasUncheckedUpdateWithoutSensorInput>
    create: XOR<LecturasCreateWithoutSensorInput, LecturasUncheckedCreateWithoutSensorInput>
  }

  export type LecturasUpdateWithWhereUniqueWithoutSensorInput = {
    where: LecturasWhereUniqueInput
    data: XOR<LecturasUpdateWithoutSensorInput, LecturasUncheckedUpdateWithoutSensorInput>
  }

  export type LecturasUpdateManyWithWhereWithoutSensorInput = {
    where: LecturasScalarWhereInput
    data: XOR<LecturasUpdateManyMutationInput, LecturasUncheckedUpdateManyWithoutSensorInput>
  }

  export type LecturasScalarWhereInput = {
    AND?: LecturasScalarWhereInput | LecturasScalarWhereInput[]
    OR?: LecturasScalarWhereInput[]
    NOT?: LecturasScalarWhereInput | LecturasScalarWhereInput[]
    id?: BigIntFilter<"Lecturas"> | bigint | number
    cr_sensor_id?: BigIntFilter<"Lecturas"> | bigint | number
    cr_fecha?: DateTimeFilter<"Lecturas"> | Date | string
    cr_distancia?: DecimalFilter<"Lecturas"> | Decimal | DecimalJsLike | number | string
  }

  export type ContenedoresUpsertWithoutSensoresInput = {
    update: XOR<ContenedoresUpdateWithoutSensoresInput, ContenedoresUncheckedUpdateWithoutSensoresInput>
    create: XOR<ContenedoresCreateWithoutSensoresInput, ContenedoresUncheckedCreateWithoutSensoresInput>
    where?: ContenedoresWhereInput
  }

  export type ContenedoresUpdateToOneWithWhereWithoutSensoresInput = {
    where?: ContenedoresWhereInput
    data: XOR<ContenedoresUpdateWithoutSensoresInput, ContenedoresUncheckedUpdateWithoutSensoresInput>
  }

  export type ContenedoresUpdateWithoutSensoresInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ubicacion?: StringFieldUpdateOperationsInput | string
    cr_codigo_qr?: StringFieldUpdateOperationsInput | string
    cr_nivel_llenado?: IntFieldUpdateOperationsInput | number
    formularios?: FormulariosUpdateManyWithoutContenedorNestedInput
    tareas?: TareasUpdateManyWithoutContenedorNestedInput
  }

  export type ContenedoresUncheckedUpdateWithoutSensoresInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ubicacion?: StringFieldUpdateOperationsInput | string
    cr_codigo_qr?: StringFieldUpdateOperationsInput | string
    cr_nivel_llenado?: IntFieldUpdateOperationsInput | number
    formularios?: FormulariosUncheckedUpdateManyWithoutContenedorNestedInput
    tareas?: TareasUncheckedUpdateManyWithoutContenedorNestedInput
  }

  export type SensoresCreateWithoutLecturasInput = {
    id?: bigint | number
    contenedor: ContenedoresCreateNestedOneWithoutSensoresInput
  }

  export type SensoresUncheckedCreateWithoutLecturasInput = {
    id?: bigint | number
    cr_contenedor_id: bigint | number
  }

  export type SensoresCreateOrConnectWithoutLecturasInput = {
    where: SensoresWhereUniqueInput
    create: XOR<SensoresCreateWithoutLecturasInput, SensoresUncheckedCreateWithoutLecturasInput>
  }

  export type SensoresUpsertWithoutLecturasInput = {
    update: XOR<SensoresUpdateWithoutLecturasInput, SensoresUncheckedUpdateWithoutLecturasInput>
    create: XOR<SensoresCreateWithoutLecturasInput, SensoresUncheckedCreateWithoutLecturasInput>
    where?: SensoresWhereInput
  }

  export type SensoresUpdateToOneWithWhereWithoutLecturasInput = {
    where?: SensoresWhereInput
    data: XOR<SensoresUpdateWithoutLecturasInput, SensoresUncheckedUpdateWithoutLecturasInput>
  }

  export type SensoresUpdateWithoutLecturasInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    contenedor?: ContenedoresUpdateOneRequiredWithoutSensoresNestedInput
  }

  export type SensoresUncheckedUpdateWithoutLecturasInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_contenedor_id?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type RutasCreateWithoutTareasInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_detalles?: string | null
    conductor: ConductoresCreateNestedOneWithoutRutasInput
  }

  export type RutasUncheckedCreateWithoutTareasInput = {
    id?: bigint | number
    cr_conductor_id: bigint | number
    cr_fecha: Date | string
    cr_detalles?: string | null
  }

  export type RutasCreateOrConnectWithoutTareasInput = {
    where: RutasWhereUniqueInput
    create: XOR<RutasCreateWithoutTareasInput, RutasUncheckedCreateWithoutTareasInput>
  }

  export type ContenedoresCreateWithoutTareasInput = {
    id?: bigint | number
    cr_ubicacion: string
    cr_codigo_qr: string
    cr_nivel_llenado?: number
    sensores?: SensoresCreateNestedManyWithoutContenedorInput
    formularios?: FormulariosCreateNestedManyWithoutContenedorInput
  }

  export type ContenedoresUncheckedCreateWithoutTareasInput = {
    id?: bigint | number
    cr_ubicacion: string
    cr_codigo_qr: string
    cr_nivel_llenado?: number
    sensores?: SensoresUncheckedCreateNestedManyWithoutContenedorInput
    formularios?: FormulariosUncheckedCreateNestedManyWithoutContenedorInput
  }

  export type ContenedoresCreateOrConnectWithoutTareasInput = {
    where: ContenedoresWhereUniqueInput
    create: XOR<ContenedoresCreateWithoutTareasInput, ContenedoresUncheckedCreateWithoutTareasInput>
  }

  export type ConductoresCreateWithoutTareasInput = {
    id?: bigint | number
    cr_nombre: string
    cr_correo: string
    cr_contrasenia: string
    rutas?: RutasCreateNestedManyWithoutConductorInput
  }

  export type ConductoresUncheckedCreateWithoutTareasInput = {
    id?: bigint | number
    cr_nombre: string
    cr_correo: string
    cr_contrasenia: string
    rutas?: RutasUncheckedCreateNestedManyWithoutConductorInput
  }

  export type ConductoresCreateOrConnectWithoutTareasInput = {
    where: ConductoresWhereUniqueInput
    create: XOR<ConductoresCreateWithoutTareasInput, ConductoresUncheckedCreateWithoutTareasInput>
  }

  export type RutasUpsertWithoutTareasInput = {
    update: XOR<RutasUpdateWithoutTareasInput, RutasUncheckedUpdateWithoutTareasInput>
    create: XOR<RutasCreateWithoutTareasInput, RutasUncheckedCreateWithoutTareasInput>
    where?: RutasWhereInput
  }

  export type RutasUpdateToOneWithWhereWithoutTareasInput = {
    where?: RutasWhereInput
    data: XOR<RutasUpdateWithoutTareasInput, RutasUncheckedUpdateWithoutTareasInput>
  }

  export type RutasUpdateWithoutTareasInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_detalles?: NullableStringFieldUpdateOperationsInput | string | null
    conductor?: ConductoresUpdateOneRequiredWithoutRutasNestedInput
  }

  export type RutasUncheckedUpdateWithoutTareasInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_conductor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_detalles?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContenedoresUpsertWithoutTareasInput = {
    update: XOR<ContenedoresUpdateWithoutTareasInput, ContenedoresUncheckedUpdateWithoutTareasInput>
    create: XOR<ContenedoresCreateWithoutTareasInput, ContenedoresUncheckedCreateWithoutTareasInput>
    where?: ContenedoresWhereInput
  }

  export type ContenedoresUpdateToOneWithWhereWithoutTareasInput = {
    where?: ContenedoresWhereInput
    data: XOR<ContenedoresUpdateWithoutTareasInput, ContenedoresUncheckedUpdateWithoutTareasInput>
  }

  export type ContenedoresUpdateWithoutTareasInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ubicacion?: StringFieldUpdateOperationsInput | string
    cr_codigo_qr?: StringFieldUpdateOperationsInput | string
    cr_nivel_llenado?: IntFieldUpdateOperationsInput | number
    sensores?: SensoresUpdateManyWithoutContenedorNestedInput
    formularios?: FormulariosUpdateManyWithoutContenedorNestedInput
  }

  export type ContenedoresUncheckedUpdateWithoutTareasInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ubicacion?: StringFieldUpdateOperationsInput | string
    cr_codigo_qr?: StringFieldUpdateOperationsInput | string
    cr_nivel_llenado?: IntFieldUpdateOperationsInput | number
    sensores?: SensoresUncheckedUpdateManyWithoutContenedorNestedInput
    formularios?: FormulariosUncheckedUpdateManyWithoutContenedorNestedInput
  }

  export type ConductoresUpsertWithoutTareasInput = {
    update: XOR<ConductoresUpdateWithoutTareasInput, ConductoresUncheckedUpdateWithoutTareasInput>
    create: XOR<ConductoresCreateWithoutTareasInput, ConductoresUncheckedCreateWithoutTareasInput>
    where?: ConductoresWhereInput
  }

  export type ConductoresUpdateToOneWithWhereWithoutTareasInput = {
    where?: ConductoresWhereInput
    data: XOR<ConductoresUpdateWithoutTareasInput, ConductoresUncheckedUpdateWithoutTareasInput>
  }

  export type ConductoresUpdateWithoutTareasInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_nombre?: StringFieldUpdateOperationsInput | string
    cr_correo?: StringFieldUpdateOperationsInput | string
    cr_contrasenia?: StringFieldUpdateOperationsInput | string
    rutas?: RutasUpdateManyWithoutConductorNestedInput
  }

  export type ConductoresUncheckedUpdateWithoutTareasInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_nombre?: StringFieldUpdateOperationsInput | string
    cr_correo?: StringFieldUpdateOperationsInput | string
    cr_contrasenia?: StringFieldUpdateOperationsInput | string
    rutas?: RutasUncheckedUpdateManyWithoutConductorNestedInput
  }

  export type RutasCreateManyConductorInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_detalles?: string | null
  }

  export type TareasCreateManyConductorInput = {
    id?: bigint | number
    cr_ruta_id: bigint | number
    cr_contenedor_id: bigint | number
    cr_estado: boolean
  }

  export type RutasUpdateWithoutConductorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_detalles?: NullableStringFieldUpdateOperationsInput | string | null
    tareas?: TareasUpdateManyWithoutRutaNestedInput
  }

  export type RutasUncheckedUpdateWithoutConductorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_detalles?: NullableStringFieldUpdateOperationsInput | string | null
    tareas?: TareasUncheckedUpdateManyWithoutRutaNestedInput
  }

  export type RutasUncheckedUpdateManyWithoutConductorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_detalles?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TareasUpdateWithoutConductorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
    ruta?: RutasUpdateOneRequiredWithoutTareasNestedInput
    contenedor?: ContenedoresUpdateOneRequiredWithoutTareasNestedInput
  }

  export type TareasUncheckedUpdateWithoutConductorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ruta_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_contenedor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TareasUncheckedUpdateManyWithoutConductorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ruta_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_contenedor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SensoresCreateManyContenedorInput = {
    id?: bigint | number
  }

  export type FormulariosCreateManyContenedorInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_problema?: string | null
    cr_descripcion?: string | null
  }

  export type TareasCreateManyContenedorInput = {
    id?: bigint | number
    cr_ruta_id: bigint | number
    cr_conductor_id?: bigint | number | null
    cr_estado: boolean
  }

  export type SensoresUpdateWithoutContenedorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    lecturas?: LecturasUpdateManyWithoutSensorNestedInput
  }

  export type SensoresUncheckedUpdateWithoutContenedorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    lecturas?: LecturasUncheckedUpdateManyWithoutSensorNestedInput
  }

  export type SensoresUncheckedUpdateManyWithoutContenedorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type FormulariosUpdateWithoutContenedorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_problema?: NullableStringFieldUpdateOperationsInput | string | null
    cr_descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormulariosUncheckedUpdateWithoutContenedorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_problema?: NullableStringFieldUpdateOperationsInput | string | null
    cr_descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormulariosUncheckedUpdateManyWithoutContenedorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_problema?: NullableStringFieldUpdateOperationsInput | string | null
    cr_descripcion?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TareasUpdateWithoutContenedorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
    ruta?: RutasUpdateOneRequiredWithoutTareasNestedInput
    conductor?: ConductoresUpdateOneWithoutTareasNestedInput
  }

  export type TareasUncheckedUpdateWithoutContenedorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ruta_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_conductor_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TareasUncheckedUpdateManyWithoutContenedorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_ruta_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_conductor_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TareasCreateManyRutaInput = {
    id?: bigint | number
    cr_contenedor_id: bigint | number
    cr_conductor_id?: bigint | number | null
    cr_estado: boolean
  }

  export type TareasUpdateWithoutRutaInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
    contenedor?: ContenedoresUpdateOneRequiredWithoutTareasNestedInput
    conductor?: ConductoresUpdateOneWithoutTareasNestedInput
  }

  export type TareasUncheckedUpdateWithoutRutaInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_contenedor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_conductor_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TareasUncheckedUpdateManyWithoutRutaInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_contenedor_id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_conductor_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    cr_estado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LecturasCreateManySensorInput = {
    id?: bigint | number
    cr_fecha: Date | string
    cr_distancia: Decimal | DecimalJsLike | number | string
  }

  export type LecturasUpdateWithoutSensorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_distancia?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type LecturasUncheckedUpdateWithoutSensorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_distancia?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type LecturasUncheckedUpdateManyWithoutSensorInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    cr_fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    cr_distancia?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}